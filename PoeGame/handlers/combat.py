# handlers/combat.py
import random
import logging
import time
import math
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd

from database.db_manager import (
    get_player_effective_stats, update_player_vitals, update_player_xp,
    update_quest_progress, clear_daily_quest, apply_death_penalty,
    check_and_apply_regen, add_item_to_inventory, get_learned_spells
)
from game_data import (
    MONSTERS, SPELLS, ALL_ITEMS, get_random_loot_item_id,
    calculate_final_spell_damage, # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–µ–π–ª–∏–Ω–≥–∞ –æ—Ç –∏–Ω—Ç—ã
    calculate_damage_with_crit # <-- –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è –∫—Ä–∏—Ç–∞
)
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞:
# from handlers.combat import ...

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")

router = Router()

class CombatStates(StatesGroup):
    fighting = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π else ---
def calculate_player_attack_damage(strength: int, crit_chance: float, crit_damage: float) -> tuple[int, bool]:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –∞—Ç–∞–∫–∏, –∞ –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∫—Ä–∏—Ç."""
    base_damage = max(1, strength // 2)
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫—Ä–∏—Ç–∞
    final_damage, is_crit = calculate_damage_with_crit(base_damage, crit_chance, crit_damage)
    return final_damage, is_crit

def calculate_dodge_chance(dexterity: int) -> float:
    return min(75.0, dexterity / 5.0)
def calculate_damage_reduction(armor: int) -> int:
    return armor // 20


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π (–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è) ---
async def get_combat_action_keyboard(user_id: int, monster_key: str, player_mana: int, active_effects: dict) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –±–æ—é, –≤–∫–ª—é—á–∞—è –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ø–µ–ª–ª—ã."""
    buttons = [
        [InlineKeyboardButton(text="üó°Ô∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"fight_action:attack:{monster_key}")],
    ]
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ø–µ–ª–ª—ã
    learned_spells = await get_learned_spells(user_id)
    mana_multiplier = float(active_effects.get('mana_cost_multiplier', 1.0))

    for spell_data in learned_spells:
        spell_id = spell_data['id']
        spell_name = spell_data['name']
        base_mana_cost = spell_data['mana_cost']
        actual_mana_cost = math.ceil(base_mana_cost * mana_multiplier)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–Ω—ã
        cost_text = f" ({actual_mana_cost} –ú)"

        if player_mana >= actual_mana_cost:
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ú® {hd.quote(spell_name)}{cost_text}",
                    callback_data=f"fight_action:{spell_id}:{monster_key}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–ø–µ–ª–ª–∞
                )
            ])
        else:
             buttons.append([
                InlineKeyboardButton(
                    text=f"‚ùå {hd.quote(spell_name)}{cost_text}",
                    callback_data=f"fight_action:no_mana"
                )
            ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@router.message(F.text.lower() == "‚öîÔ∏è –±–æ–π —Å –º–æ–Ω—Å—Ç—Ä–æ–º")
async def start_fight_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state_str = await state.get_state()
    await check_and_apply_regen(user_id, current_state_str)

    player = await get_player_effective_stats(user_id)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Å–µ–≤–¥–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ---
    if not player:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    if player['current_hp'] <= 0:
        await message.answer("–í—ã –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è! –ù–∞–π–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏—Å—Ü–µ–ª–∏—Ç—å—Å—è (‚öïÔ∏è –õ–µ–∫–∞—Ä—å).")
        return
    if current_state_str == CombatStates.fighting.state:
        state_data = await state.get_data()
        monster_key = state_data.get("monster_key")
        monster_hp = state_data.get("monster_hp")
        if monster_key and monster_hp is not None:
             base_monster_hp = MONSTERS.get(monster_key, {}).get('hp', '?') # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –•–ü –¥–ª—è –ø–æ–∫–∞–∑–∞
             # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∫–∞–∑–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
             keyboard = await get_combat_action_keyboard(user_id, monster_key, player['current_mana'], player.get('active_effects',{}))
             await message.answer(
                 f"–í—ã —É–∂–µ —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å <b>{hd.quote(monster_key)}</b>!\n"
                 f"‚ù§Ô∏è HP –ú–æ–Ω—Å—Ç—Ä–∞: {monster_hp}/{base_monster_hp}\n\n" # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ/–º–∞–∫—Å. —Å–∫–µ–π–ª–µ–Ω–Ω–æ–µ, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏
                 f"–í–∞—à–∏ —Å—Ç–∞—Ç—ã:\n"
                 f"‚ù§Ô∏è HP: {player['current_hp']}/{player['max_hp']} | üõ°Ô∏è ES: {player['energy_shield']}/{player['max_energy_shield']} | üíß Mana: {player['current_mana']}/{player['max_mana']}\n\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                 reply_markup=keyboard,
                 parse_mode="HTML"
             )
        else:
            await message.answer("–í—ã —É–∂–µ –≤ –±–æ—é, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ–π.")
            await state.clear()
        return
        # --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ES –ø–µ—Ä–µ–¥ –±–æ–µ–º ---
    if player['energy_shield'] < player['max_energy_shield']:
        logging.info(f"Restoring ES for player {user_id} before combat.")
        await update_player_vitals(user_id, set_es=player['max_energy_shield'])
        player = await get_player_effective_stats(user_id)
        if not player:
            await message.answer("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—â–∏—Ç–∞.")
            return
        

     # --- –í—ã–±–æ—Ä –∏ –°–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–æ–Ω—Å—Ç—Ä–∞ ---
    monster_key = random.choice(list(MONSTERS.keys()))
    base_monster = MONSTERS[monster_key]
    player_level = player['level']

    # –§–æ—Ä–º—É–ª—ã —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å)
    hp_multiplier = 1 + (player_level - 1) * 0.15
    damage_multiplier = 1 + (player_level - 1) * 0.10
    xp_multiplier = 1 + (player_level - 1) * 0.08
    gold_multiplier = 1 + (player_level - 1) * 0.05
    scaled_hp = math.ceil(base_monster['hp'] * hp_multiplier)
    scaled_damage = math.ceil(base_monster['damage'] * damage_multiplier)
    scaled_xp = math.ceil(base_monster['xp_reward'] * xp_multiplier)
    base_gold_drop = random.randint(1, 5) + (base_monster['xp_reward'] // 3)
    scaled_gold = math.ceil(base_gold_drop * gold_multiplier)

    logging.info(f"Player {user_id} (Lvl {player_level}) starting fight with {monster_key}. Scaled HP:{scaled_hp}, Dmg:{scaled_damage}, XP:{scaled_xp}, Gold:{scaled_gold}")

    await state.update_data(
        monster_key=monster_key,
        monster_hp=scaled_hp,
        monster_max_hp=scaled_hp, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å –•–ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        monster_damage=scaled_damage,
        monster_xp_reward=scaled_xp,
        monster_gold_reward=scaled_gold,
        player_buffs={} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –±–∞—Ñ—Ñ–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –±–æ—è
    )
    await state.set_state(CombatStates.fighting)


    keyboard = await get_combat_action_keyboard(user_id, monster_key, player['current_mana'], player.get('active_effects',{}))
    await message.answer(
        f"–ù–∞ –≤–∞—à–µ–º –ø—É—Ç–∏ –≤—Å—Ç–∞–µ—Ç <b>{hd.quote(monster_key)}</b> (–£—Ä. {player['level']})!\n"
        f"‚ù§Ô∏è HP: {scaled_hp} | ‚öîÔ∏è –£—Ä–æ–Ω: {scaled_damage}\n\n"
        f"–í–∞—à–∏ —Å—Ç–∞—Ç—ã:\n"
        f"‚ù§Ô∏è HP: {player['current_hp']}/{player['max_hp']} | üõ°Ô∏è ES: {player['energy_shield']}/{player['max_energy_shield']} | üíß Mana: {player['current_mana']}/{player['max_mana']}\n\n" # ES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# --- –ë–æ–µ–≤–æ–π —Ü–∏–∫–ª (handle_combat_action) ---
@router.callback_query(CombatStates.fighting, F.data.startswith("fight_action:"))
async def handle_combat_action(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer() # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
    player = await get_player_effective_stats(user_id)
    state_data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω—Å—Ç—Ä–∞ –ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø (—Å–∫–µ–π–ª–µ–Ω–Ω—ã–µ)
    monster_key = state_data.get("monster_key")
    current_monster_hp = state_data.get("monster_hp")
    monster_max_hp = state_data.get("monster_max_hp")
    monster_damage = state_data.get("monster_damage")
    monster_xp_reward = state_data.get("monster_xp_reward")
    monster_gold_reward = state_data.get("monster_gold_reward")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (not player or not monster_key or current_monster_hp is None or
            monster_max_hp is None or monster_damage is None or
            monster_xp_reward is None or monster_gold_reward is None):
        logging.error(f"Incomplete combat state for user {user_id}. Data: {state_data}")
        try:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è. –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω.")
        except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await state.clear()
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ callback_data
    action_data = callback.data.split(":")
    action_type = action_data[1]

    if action_type == "no_mana":
        # –ú–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–ª–∏ –¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∞–ª–µ—Ä—Ç–∞
        # await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã!")
        return

    # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ ---
    player_damage_dealt = 0
    mana_cost = 0
    action_log = ""
    is_crit = False
    healed_amount = 0
    applied_buffs = {} # –ë–∞—Ñ—Ñ—ã, –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –í –≠–¢–û–ú –•–û–î–ï

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    active_effects = player.get('active_effects', {})
    try: mana_multiplier = float(active_effects.get('mana_cost_multiplier', 1.0)); mana_multiplier = max(0, mana_multiplier)
    except (ValueError, TypeError): mana_multiplier = 1.0
    try: crit_mult_bonus = float(active_effects.get('crit_multiplier_bonus', 0))
    except (ValueError, TypeError): crit_mult_bonus = 0

    # --- –õ–æ–≥–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ ---
    if action_type == "attack":
        # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ñ—Ñ –∞—Ç–∞–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        current_buffs = state_data.get("player_buffs", {}) # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ñ—Ñ—ã –° –ü–†–û–®–õ–û–ì–û –•–û–î–ê
        attack_multiplier = current_buffs.get("buff_next_attack", 1.0)
        # –°—á–∏—Ç–∞–µ–º —É—Ä–æ–Ω –∞—Ç–∞–∫–∏
        base_attack_damage, is_crit = calculate_player_attack_damage(
            player['strength'], player['crit_chance'], player['crit_damage'] + crit_mult_bonus
        )
        player_damage_dealt, is_crit = calculate_player_attack_damage(
            player['strength'], player['crit_chance'], player['crit_damage'] + crit_mult_bonus
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥
        crit_text = "üí• <b>–ö–†–ò–¢!</b> " if is_crit else ""
        buff_text = f"(x{attack_multiplier:.1f}!) " if attack_multiplier > 1.0 else ""
        action_log = f"–í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ üó°Ô∏è {buff_text}{crit_text}–∏ –Ω–∞–Ω–µ—Å–ª–∏ {player_damage_dealt} —É—Ä–æ–Ω–∞."
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞—Ñ—Ñ –∞—Ç–∞–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        if "buff_next_attack" in current_buffs:
             del current_buffs["buff_next_attack"]
             # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ñ—Ñ—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –±–∞—Ñ—Ñ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –±–æ–π –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —Ö–æ–¥—É
             await state.update_data(player_buffs=current_buffs)
             logging.debug(f"Buff 'buff_next_attack' consumed for user {user_id}")


    else: # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ (action_type = spell_id)
        spell_id = action_type
        spell_data = SPELLS.get(spell_id)

        if not spell_data:
             logging.warning(f"Spell NOT FOUND for action '{action_type}' by user {user_id}.")
             await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
             return

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞–Ω—ã
        try:
            base_mana_cost = int(spell_data['mana_cost'])
            actual_mana_cost = math.ceil(base_mana_cost * mana_multiplier)
        except Exception as e:
            logging.error(f"Error calculating mana cost for spell '{spell_name}': {e}")
            actual_mana_cost = 99999

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–Ω—ã
        if player['current_mana'] >= actual_mana_cost:
            mana_cost = actual_mana_cost # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –º–∞–Ω—ã
            spell_name = spell_data['name']
            spell_target = spell_data.get('target', 'enemy')
            effect_type = spell_data.get('effect_type')
            effect_value = spell_data.get('effect_value')
            duration = spell_data.get('duration', 0)
            cost_text = f" ({mana_cost} –ú)"
            action_log = f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ‚ú® {hd.quote(spell_name)}{cost_text}"
            
        if spell_data and player['current_mana'] >= actual_mana_cost:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
            if effect_type == "damage":
                base_damage = effect_value
                final_base_damage = calculate_final_spell_damage(base_damage, player['intelligence'])
                # –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–∞ –¥–ª—è —Å–ø–µ–ª–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É calculate_spell_damage, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±–µ—Ä–µ—Ç —Å–ª–æ–≤–∞—Ä—å)
                damage_dict_for_calc = {'damage': final_base_damage} # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                player_damage_dealt, is_crit = calculate_damage_with_crit(
                    final_base_damage, # –ü–µ—Ä–µ–¥–∞–µ–º —É—Ä–æ–Ω –° –£–ß–ï–¢–û–ú –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê
                    player['crit_chance'],
                    player['crit_damage'] + crit_mult_bonus
                )# –ü–µ—Ä–µ–¥–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫—Ä–∏—Ç–∞ –° –£–ß–ï–¢–û–ú –ë–û–ù–£–°–û–í
                crit_text = "üí• <b>–ö–†–ò–¢!</b> " if is_crit else ""
                action_log += f", {crit_text}–Ω–∞–Ω–µ—Å—è {player_damage_dealt} —É—Ä–æ–Ω–∞ {spell_target}."

            elif effect_type == "heal_percent":
                percent = effect_value
                heal_calc = math.ceil(player['max_hp'] * (percent / 100.0))
                heal_actual = min(heal_calc, player['max_hp'] - player['current_hp'])
                healed_amount = heal_actual
                action_log += f", –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤ {healed_amount} –∑–¥–æ—Ä–æ–≤—å—è."

            elif effect_type == "buff_next_attack":
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ñ—Ñ –¥–ª—è –°–õ–ï–î–£–Æ–©–ï–ì–û —Ö–æ–¥–∞
                applied_buffs["buff_next_attack"] = effect_value
                action_log += f", —É—Å–∏–ª–∏–≤ —Å–ª–µ–¥—É—é—â—É—é –∞—Ç–∞–∫—É (x{effect_value:.1f})."

            elif effect_type == "temp_buff":
                 if isinstance(effect_value, dict) and duration > 0:
                     buff_log_parts = []
                     for stat_name, buff_val in effect_value.items():
                         # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞—Ñ—Ñ –≤ —Å–ª–æ–≤–∞—Ä—å applied_buffs
                         applied_buffs[f"temp_{stat_name}"] = {'value': buff_val, 'duration': duration}
                         buff_log_parts.append(f"+{buff_val} {stat_name}")
                     if buff_log_parts:
                          action_log += f", –≤—Ä–µ–º–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤ {', '.join(buff_log_parts)} –Ω–∞ {duration} —Ö–æ–¥–∞."
                          logging.info(f"Applied temp_buff for {duration} turns: {effect_value}")
                     else:
                          action_log += ", –Ω–æ –±–∞—Ñ—Ñ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö)."
                 else:
                      action_log += ", –Ω–æ –±–∞—Ñ—Ñ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)."

            # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É "heal_over_time", "summon"
            else:
                 logging.warning(f"Unknown spell effect type: {effect_type} for spell {spell_id}")
                 action_log += ", –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)."

        else: # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞–Ω—ã
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã!", show_alert=True)
            return # –í—ã—Ö–æ–¥ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —Ö–æ–¥ –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è

    # --- –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è HP/Mana –∏–≥—Ä–æ–∫–∞ (–≤–∫–ª—é—á–∞—è —Ö–∏–ª) ---
    logging.debug(f"[handle_combat_action] Before player vitals update: HP change={healed_amount}, Mana change={-mana_cost}")
    # –í—ã–∑—ã–≤–∞–µ–º update_player_vitals –¢–û–õ–¨–ö–û –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–Ω—ã/—Ö–∏–ª–∞ –∏–≥—Ä–æ–∫–∞, –ù–ï –¥–ª—è —É—Ä–æ–Ω–∞ –º–æ–Ω—Å—Ç—Ä–∞
    # –£—Ä–æ–Ω –º–æ–Ω—Å—Ç—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ–∑–∂–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º –≤—ã–∑–æ–≤–æ–º
    await update_player_vitals(user_id, hp_change=healed_amount, mana_change=-mana_cost)
    logging.debug(f"[handle_combat_action] After player vitals update.")

    # --- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ñ—Ñ—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM ---
    current_buffs = state_data.get("player_buffs", {}) # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ñ—Ñ—ã —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ö–æ–¥–∞ (–º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏)
    next_turn_buffs = {}
    buffs_expired_log = []
    # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä—ã—Ö –±–∞—Ñ—Ñ–æ–≤
    for buff_key, buff_data in current_buffs.items():
        if isinstance(buff_data, dict) and 'duration' in buff_data:
            remaining_duration = buff_data['duration'] - 1
            if remaining_duration > 0:
                next_turn_buffs[buff_key] = {'value': buff_data['value'], 'duration': remaining_duration}
            else:
                buffs_expired_log.append(buff_key.replace('temp_', ''))
        # else: –±–∞—Ñ—Ñ—ã –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, buff_next_attack, –µ—Å–ª–∏ –Ω–µ –±—ã–ª –ø–æ—Ç—Ä–∞—á–µ–Ω) –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∫ –µ—Å—Ç—å? –ò–ª–∏ –æ–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω? –õ—É—á—à–µ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–æ, —á—Ç–æ –Ω–µ –∏–º–µ–µ—Ç duration.

    if buffs_expired_log:
         logging.info(f"Buffs expired for user {user_id}: {', '.join(buffs_expired_log)}")
         # action_log += f"\n<i>(–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫: {', '.join(buffs_expired_log)})</i>" # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª–æ–≥ –±–æ—è

    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ñ—Ñ—ã, –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –í –≠–¢–û–ú –•–û–î–ï
    next_turn_buffs.update(applied_buffs)
    await state.update_data(player_buffs=next_turn_buffs) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ñ—Ñ—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
    logging.debug(f"Player {user_id} buffs updated in state for next turn: {next_turn_buffs}")


    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –º–æ–Ω—Å—Ç—Ä–∞ (–µ—Å–ª–∏ –±—ã–ª —É—Ä–æ–Ω) ---
    new_monster_hp = current_monster_hp
    if player_damage_dealt > 0:
        new_monster_hp = max(0, current_monster_hp - player_damage_dealt) # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å
        await state.update_data(monster_hp=new_monster_hp)
        logging.debug(f"Monster HP updated: {new_monster_hp}/{monster_max_hp}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞ ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞—Ñ—Ñ–æ–≤, –Ω–æ –î–û —Ö–æ–¥–∞ –º–æ–Ω—Å—Ç—Ä–∞
    if new_monster_hp <= 0:
        logging.info(f"Player {user_id} defeated monster {monster_key}.")
        xp_gain = monster_xp_reward
        gold_gain = monster_gold_reward
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —É—Ç—Ä–æ–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞
        try: triple_gold_chance = float(active_effects.get('triple_gold_chance', 0))
        except (ValueError, TypeError): triple_gold_chance = 0
        if random.uniform(0, 100) < triple_gold_chance:
             gold_gain *= 3
             logging.info(f"Triple gold proc! Gold: {gold_gain}")
             loot_log = f"üí∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>–£–¢–†–û–ï–ù–ù–û–ï</b> –∑–æ–ª–æ—Ç–æ: {gold_gain}!\n"
        else:
             loot_log = f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ {gold_gain} –∑–æ–ª–æ—Ç–∞.\n"

        # –î—Ä–æ–ø –ø—Ä–µ–¥–º–µ—Ç–∞
        dropped_item_id = get_random_loot_item_id()
        item_drop_log = ""
        if dropped_item_id:
             item_info = ALL_ITEMS.get(dropped_item_id)
             if item_info:
                 added_to_inv = await add_item_to_inventory(user_id, dropped_item_id)
                 item_drop_log = f"üéÅ –í—ã –Ω–∞—à–ª–∏: <b>{hd.quote(item_info['name'])}</b>!\n" if added_to_inv else "üéÅ –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª—É—Ç–∞!\n"
             else: logging.error(f"Loot function returned non-existent item_id: {dropped_item_id}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ XP/–ó–æ–ª–æ—Ç–∞
        xp_update_result, leveled_up = await update_player_xp(user_id, gained_xp=xp_gain, gained_gold=gold_gain)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞
        quest_update = await update_quest_progress(user_id, monster_key)
        quest_log = ""
        if quest_update:
            if quest_update['completed']:
                quest_log = (f"üìú <b>–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!</b> (+{quest_update['gold_reward']}üí∞, +{quest_update['xp_reward']} XP)\n")
                await update_player_xp(user_id, gained_xp=quest_update['xp_reward'], gained_gold=quest_update['gold_reward'])
                await clear_daily_quest(user_id)
            else:
                 quest_log = f"üìú –ü—Ä–æ–≥—Ä–µ—Å—Å: {quest_update['current_count']}/{quest_update['target_count']} {hd.quote(monster_key)}.\n"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–µ–≤–µ–ª-–∞–ø–µ
        level_up_log = ""
        if leveled_up and xp_update_result:
             level_up_log = (f"üéâ <b>–£–†–û–í–ï–ù–¨ {xp_update_result['level']}!</b> (+{xp_update_result['gained_stat_points']} –æ—á–∫–∞) üéâ\n")

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ES –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
        player_after_fight = await get_player_effective_stats(user_id)
        if player_after_fight and player_after_fight['energy_shield'] < player_after_fight['max_energy_shield']:
             await update_player_vitals(user_id, set_es=player_after_fight['max_energy_shield'])
             logging.info(f"Player {user_id} ES restored after victory.")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π –∏ —Ä–µ–≥–µ–Ω–∏–º HP/Mana
        await state.clear()
        await check_and_apply_regen(user_id, None)

        result_text = (f"{action_log}\n\n"
                       f"<b>–ü–æ–±–µ–¥–∞ –Ω–∞–¥ {hd.quote(monster_key)}!</b> üí™\n"
                       f"‚ú® +{xp_gain} –æ–ø—ã—Ç–∞.\n"
                       f"{loot_log}{item_drop_log}{quest_log}{level_up_log}")
        try: await callback.message.edit_text(result_text, parse_mode="HTML")
        except Exception as e: await callback.message.answer(result_text, parse_mode="HTML")
        return # <<< –í–ê–ñ–ù–û: –í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã

    # --- –õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –º–æ–Ω—Å—Ç—Ä–∞ ---
    monster_raw_damage = monster_damage
    dodge_chance = calculate_dodge_chance(player['dexterity'])
    # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ñ—Ñ—ã –¥–ª—è –≠–¢–û–ì–û —Ö–æ–¥–∞ (–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤—É—é—Ç –°–ï–ô–ß–ê–°)
    current_turn_buffs = next_turn_buffs # –ë–∞—Ñ—Ñ—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    player_armor = player['armor'] + current_turn_buffs.get('temp_armor', {}).get('value', 0)
    player_damage_reduction = calculate_damage_reduction(player_armor)

    # !!! –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú player_hp_loss –ó–î–ï–°–¨ !!!
    player_hp_loss = 0
    monster_action_log = ""

    if random.uniform(0, 100) < dodge_chance:
        monster_action_log = f"{hd.quote(monster_key)} –∞—Ç–∞–∫–æ–≤–∞–ª, –Ω–æ –≤—ã —É–≤–µ—Ä–Ω—É–ª–∏—Å—å! üí®"
    else:
        actual_damage = max(1, monster_raw_damage - player_damage_reduction)
        player_hp_loss = actual_damage # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –∏–≥—Ä–æ–∫
        reduction_text = f" (-{player_damage_reduction} –±—Ä–æ–Ω—è{'üõ°Ô∏è' if current_turn_buffs.get('temp_armor') else ''})" if player_damage_reduction > 0 else "" # –≠–º–æ–¥–∑–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞—Ñ—Ñ –±—Ä–æ–Ω–∏
        monster_action_log = f"{hd.quote(monster_key)} –∞—Ç–∞–∫–æ–≤–∞–ª üëπ –∏ –Ω–∞–Ω–µ—Å –≤–∞–º <b>{actual_damage}</b> —É—Ä–æ–Ω–∞{reduction_text}."

    # --- –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–ª—ã –∏–≥—Ä–æ–∫–∞ –ü–û–°–õ–ï —Ö–æ–¥–∞ –º–æ–Ω—Å—Ç—Ä–∞ ---
    # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Ä–æ–Ω –æ—Ç –º–æ–Ω—Å—Ç—Ä–∞ (hp_change –±—É–¥–µ—Ç < 0)
    logging.info(f"[handle_combat_action CALLING_VITALS for monster attack] User {user_id}: hp_change={-player_hp_loss}")
    new_hp, new_mana, new_es = await update_player_vitals(user_id, hp_change=-player_hp_loss) # –ú–∞–Ω—É –∏ ES –Ω–µ –º–µ–Ω—è–µ–º –∑–¥–µ—Å—å
    logging.info(f"[handle_combat_action VITALS_RETURNED after monster] User {user_id}: NewHP={new_hp}, NewMana={new_mana}, NewES={new_es}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ---
    if new_hp <= 0:
        logging.info(f"Player {user_id} was defeated by {monster_key}.")
        xp_penalty, gold_penalty = await apply_death_penalty(user_id)
        penalty_log = f"‚ò†Ô∏è –í—ã —Ç–µ—Ä—è–µ—Ç–µ {xp_penalty} –æ–ø—ã—Ç–∞ –∏ {gold_penalty} –∑–æ–ª–æ—Ç–∞."
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ES –ø–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        player_after_death = await get_player_effective_stats(user_id)
        if player_after_death:
             await update_player_vitals(user_id, set_es=player_after_death['max_energy_shield'])
             logging.info(f"Player {user_id} ES restored after defeat.")

        await state.clear()
        await check_and_apply_regen(user_id, None)

        result_text = (f"{action_log}\n{monster_action_log}\n\n"
                       f"<b>–í—ã –±—ã–ª–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã {hd.quote(monster_key)}...</b> üíÄ\n"
                       f"{penalty_log}\n–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–æ–∑–Ω–∞–Ω–∏–µ.")
        try: await callback.message.edit_text(result_text, parse_mode="HTML")
        except Exception as e: await callback.message.answer(result_text, parse_mode="HTML")
        return # <<< –í–ê–ñ–ù–û: –í—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è

    # --- –ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ---
    updated_player = await get_player_effective_stats(user_id) # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã
    if not updated_player: # –ü—Ä–æ–≤–µ—Ä–∫–∞
         await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞. –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω.")
         await state.clear()
         return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –°–õ–ï–î–£–Æ–©–ï–ì–û —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    keyboard = await get_combat_action_keyboard(user_id, monster_key, updated_player['current_mana'], updated_player.get('active_effects', {}))

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –±–∞—Ñ—Ñ–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    active_buff_texts = []
    for buff_key, buff_data in next_turn_buffs.items(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ñ—Ñ—ã, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
         if isinstance(buff_data, dict) and 'duration' in buff_data:
              stat_name = buff_key.replace('temp_', '')
              active_buff_texts.append(f"{stat_name.capitalize()} (+{buff_data['value']}) [{buff_data['duration']} —Ö–æ–¥]")
         elif buff_key == "buff_next_attack":
              active_buff_texts.append(f"–£—Å–∏–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ (x{buff_data:.1f})")
    buff_display = " / ".join(active_buff_texts)
    buff_line = f"\n<i>–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {buff_display}</i>" if buff_display else ""


    result_text = (
        f"{action_log}\n{monster_action_log}\n\n"
        f"<b>{hd.quote(monster_key)}</b> –≤—Å–µ –µ—â–µ –∂–∏–≤!\n"
        f"‚ù§Ô∏è HP –ú–æ–Ω—Å—Ç—Ä–∞: {new_monster_hp}/{monster_max_hp}\n\n"
        f"–í–∞—à–∏ —Å—Ç–∞—Ç—ã:\n"
        f"‚ù§Ô∏è HP: {updated_player['current_hp']}/{updated_player['max_hp']} | üõ°Ô∏è ES: {updated_player['energy_shield']}/{updated_player['max_energy_shield']} | üíß Mana: {updated_player['current_mana']}/{updated_player['max_mana']}"
        f"{buff_line}\n\n" # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–∞—Ñ—Ñ–∞–º–∏
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    try:
        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
         if "message is not modified" in str(e): logging.debug("Combat message not modified.")
         else:
             logging.error(f"Error editing combat message: {e}")
             await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ—è. –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω.")
             await state.clear()
    except Exception as e:
        logging.error(f"Error editing combat message: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ—è. –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω.")
        await state.clear()
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
@router.callback_query(F.data.startswith("fight_action:"))
async def handle_combat_action_outside_state(callback: types.CallbackQuery):
    await callback.answer("–≠—Ç–æ—Ç –±–æ–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
    try:
        # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –Ω–µ –º–µ–Ω—è—è —Ç–µ–∫—Å—Ç —Å–∏–ª—å–Ω–æ
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"Could not edit old combat message markup: {e}")
