# handlers/gambler.py
import logging
import random
import math
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd

from database.db_manager import (
    get_player_effective_stats, update_player_xp, add_item_to_inventory,
    check_and_apply_regen
)
from game_data import (
    GAMBLER_BOX_COSTS, GAMBLER_REWARD_CHANCES, GAMBLER_ITEM_CHANCES,
    ALL_ITEMS, ITEM_TYPE_FRAGMENT, get_random_legendary_item_id
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")
router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ì–µ–º–±–ª–µ—Ä–∞
def get_gambler_keyboard(player_gold: int) -> InlineKeyboardMarkup:
    buttons = []
    for box_size, cost in GAMBLER_BOX_COSTS.items():
        can_afford = player_gold >= cost
        emoji = "‚úÖ" if can_afford else "‚ùå"
        box_name = {"small": "–ú–∞–ª–µ–Ω—å–∫–∏–π", "medium": "–°—Ä–µ–¥–Ω–∏–π", "large": "–ë–æ–ª—å—à–æ–π"}.get(box_size, box_size.capitalize())
        button_text = f"{emoji} {box_name} –Ø—â–∏–∫ ({cost}üí∞)"
        callback_data = f"gamble:{box_size}:{cost}" if can_afford else f"gamble:info:{box_size}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    buttons.append([InlineKeyboardButton(text="–£–π—Ç–∏", callback_data="gamble:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ì–µ–º–±–ª–µ—Ä
@router.message(F.text.lower() == "üé≤ –≥–µ–º–±–ª–µ—Ä")
async def gambler_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} approached the gambler.")
    try: await check_and_apply_regen(user_id, await state.get_state())
    except Exception as e: logging.error(f"Regen check error in gambler: {e}")

    player = await get_player_effective_stats(user_id)
    if not player:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
        return

    keyboard = get_gambler_keyboard(player['gold'])
    await message.answer(
        "üé≤ –ñ–µ–ª–∞–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É, –∏–∑–≥–Ω–∞–Ω–Ω–∏–∫?\n"
        "–ß–µ–º –¥–æ—Ä–æ–∂–µ —è—â–∏–∫, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ —Ö–æ—Ä–æ—à—É—é –Ω–∞–≥—Ä–∞–¥—É... –∏–ª–∏ –Ω–∞ –±–æ–ª—å—à–∏–π –ø—Ä–æ–∏–≥—Ä—ã—à!\n"
        f"<i>(–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {player['gold']}üí∞)</i>",
        reply_markup=keyboard, parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —É –ì–µ–º–±–ª–µ—Ä–∞
@router.callback_query(F.data.startswith("gamble:"))
async def handle_gamble_action(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data_parts = callback.data.split(":") # gamble:action/box_size:cost/box_size

    action_or_size = data_parts[1]

    if action_or_size == "close":
        await callback.answer("–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
        try: await callback.message.delete()
        except Exception: pass
        return
    if action_or_size == "info":
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —è—â–∏–∫–∞!", show_alert=True)
        return

    # –ü–æ–∫—É–ø–∫–∞ —è—â–∏–∫–∞: gamble:box_size:cost
    try:
        box_size = action_or_size
        cost = int(data_parts[2])
        if box_size not in GAMBLER_BOX_COSTS or GAMBLER_BOX_COSTS[box_size] != cost:
            raise ValueError("Invalid box size or cost mismatch")
    except (IndexError, ValueError) as e:
        logging.error(f"Invalid gamble callback data: {callback.data} - {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —è—â–∏–∫–∞.", show_alert=True)
        return

    await callback.answer(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º {box_size} —è—â–∏–∫...") # –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    player = await get_player_effective_stats(user_id)
    if not player:
         await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞.", show_alert=True)
         return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–ª–æ—Ç–æ –µ—â–µ —Ä–∞–∑
    if player['gold'] < cost:
         await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ {cost}üí∞.", show_alert=True)
         # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
         new_keyboard = get_gambler_keyboard(player['gold'])
         try: await callback.message.edit_reply_markup(reply_markup=new_keyboard)
         except Exception: pass
         return

    # --- –°–ø–∏—Å—ã–≤–∞–µ–º –∑–æ–ª–æ—Ç–æ ---
    success_gold, _ = await update_player_xp(user_id, gained_gold=-cost)
    if not success_gold:
        logging.error(f"Failed to deduct gold ({cost}) for gambler box for user {user_id}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∑–æ–ª–æ—Ç–∞.", show_alert=True)
        return

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã ---
    reward_types = list(GAMBLER_REWARD_CHANCES.keys())
    reward_weights = list(GAMBLER_REWARD_CHANCES.values())
    chosen_reward_type = random.choices(reward_types, weights=reward_weights, k=1)[0]

    logging.info(f"User {user_id} opened '{box_size}' box (cost {cost}). Rolled reward type: {chosen_reward_type}")
    result_message = f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ {box_size} —è—â–∏–∫ –∑–∞ {cost}üí∞...\n\n"

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ù–∞–≥—Ä–∞–¥—ã ---
    if chosen_reward_type == "xp":
        min_xp = 10 * (list(GAMBLER_BOX_COSTS.keys()).index(box_size) + 1) # 10, 20, 30
        max_xp = 100 * (list(GAMBLER_BOX_COSTS.keys()).index(box_size) + 1) # 100, 200, 300
        xp_gained = random.randint(min_xp, max_xp)
        await update_player_xp(user_id, gained_xp=xp_gained)
        result_message += f"‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ {xp_gained} –æ–ø—ã—Ç–∞!"
        logging.info(f"Gambler reward: +{xp_gained} XP for user {user_id}")

    elif chosen_reward_type == "gold":
        # –®–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä–∞—Ç—å/–≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 60/40
        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç 0.2 –¥–æ 2.0
        min_mult = 0.2
        max_mult = 2.0
        # –°–º–µ—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã —á–∞—â–µ –≤—ã–ø–∞–¥–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ 1
        roll = random.uniform(0, 1)
        multiplier = min_mult + (max_mult - min_mult) * (roll ** 1.5) # –°—Ç–µ–ø–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –∫ <1

        gold_gained_or_lost = math.floor(cost * multiplier)
        # –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±–∞–≤–∫–∞/—É–±—ã—Ç–æ–∫
        net_gold_change = gold_gained_or_lost - cost
        await update_player_xp(user_id, gained_gold=net_gold_change) # –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å—Ç—É—é —Ä–∞–∑–Ω–∏—Ü—É

        if net_gold_change >= 0:
             result_message += f"üí∞ –í–∞–º –ø–æ–≤–µ–∑–ª–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {gold_gained_or_lost} –∑–æ–ª–æ—Ç–∞ (—á–∏—Å—Ç—ã–π +{net_gold_change}üí∞)!"
        else:
             result_message += f"üí∏ –£–≤—ã... –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–ª—å–∫–æ {gold_gained_or_lost} –∑–æ–ª–æ—Ç–∞ (—á–∏—Å—Ç—ã–π {net_gold_change}üí∞)."
        logging.info(f"Gambler reward: Gold change {net_gold_change} for user {user_id}")

    elif chosen_reward_type == "item":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
        item_rarities = list(GAMBLER_ITEM_CHANCES.keys())
        item_weights = list(GAMBLER_ITEM_CHANCES.values())
        chosen_rarity = random.choices(item_rarities, weights=item_weights, k=1)[0]
        logging.info(f"Gambler item reward: Rolled rarity '{chosen_rarity}' for user {user_id}")

        item_id_to_give = None
        item_info = None

        if chosen_rarity == "legendary":
            item_id_to_give = get_random_legendary_item_id()
        elif chosen_rarity == "fragment":
            # –î–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            fragment_ids = [id for id, data in ALL_ITEMS.items() if data.get('type') == ITEM_TYPE_FRAGMENT]
            if fragment_ids: item_id_to_give = random.choice(fragment_ids)
        else: # common, magic, rare
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ (–ò–°–ö–õ–Æ–ß–ê–Ø –ª–µ–≥–µ–Ω–¥–∞—Ä–∫–∏, —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∫–≤–µ—Å—Ç–æ–≤—ã–µ)
            possible_items = [
                id for id, data in ALL_ITEMS.items()
                if data.get('rarity') == chosen_rarity and data.get('equipable') # –¢–æ–ª—å–∫–æ –Ω–∞–¥–µ–≤–∞–µ–º—ã–µ –∏ –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            ]
            if possible_items: item_id_to_give = random.choice(possible_items)

        if item_id_to_give:
            item_info = ALL_ITEMS.get(item_id_to_give)
            if item_info:
                added = await add_item_to_inventory(user_id, item_id_to_give)
                if added:
                    rarity_prefix = {"legendary": "‚ú®–õ–ï–ì–ï–ù–î–ê–†–ù–´–ô‚ú®", "fragment": "üíé–§—Ä–∞–≥–º–µ–Ω—Çüíé", "rare": "‚≠ê–†–µ–¥–∫–∏–π‚≠ê", "magic": "üíß–ú–∞–≥–∏—á–µ—Å–∫–∏–πüíß"}.get(chosen_rarity, "")
                    result_message += f"üéÅ –í—ã –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {rarity_prefix} <b>{hd.quote(item_info['name'])}</b>!"
                    logging.info(f"Gambler reward: Item '{item_id_to_give}' ({item_info['name']}) added for user {user_id}")
                else:
                    result_message += "üéÅ –í—ã —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–∏, –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–Ω—è—Ç—å (–æ—à–∏–±–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è)."
                    logging.error(f"Failed to add gambler item '{item_id_to_give}' to inventory for user {user_id}")
            else:
                 result_message += "üéÅ –í—ã —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–∏, –Ω–æ –æ–Ω–æ —Ä–∞—Å—Å—ã–ø–∞–ª–æ—Å—å –≤ –ø—ã–ª—å (–æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞)."
                 logging.error(f"Gambler rolled item_id '{item_id_to_give}' but it's not in ALL_ITEMS.")
        else:
            result_message += "üí® –Ø—â–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è –ø–æ—á—Ç–∏ –ø—É—Å—Ç—ã–º... –ù–µ–º–Ω–æ–≥–æ –ø—ã–ª–∏." # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
            logging.warning(f"Could not find an item of rarity '{chosen_rarity}' for gambler reward for user {user_id}.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–µ–º–±–ª–µ—Ä–∞
    player_after = await get_player_effective_stats(user_id) # –ù–æ–≤–æ–µ –∑–æ–ª–æ—Ç–æ
    new_keyboard = get_gambler_keyboard(player_after['gold'])
    result_message += f"\n\n<i>(–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {player_after['gold']}üí∞)</i>"
    try:
        await callback.message.edit_text(result_message, reply_markup=new_keyboard, parse_mode="HTML")
    except Exception as e:
        logging.warning(f"Could not edit gambler message after result: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await callback.message.answer(result_message, reply_markup=new_keyboard, parse_mode="HTML")
