# handlers/stats.py
import logging
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd
from aiogram.exceptions import TelegramBadRequest # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
from database.db_manager import get_player, update_stat_points, increase_attribute, check_and_apply_regen

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
class StatAllocationStates(StatesGroup):
    choosing_attribute = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
ATTRIBUTE_NAMES = {
    'strength': 'üí™ –°–∏–ª–∞',
    'dexterity': 'üèπ –õ–æ–≤–∫–æ—Å—Ç—å',
    'intelligence': 'üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç'
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
# (–î—É–±–ª–∏—Ä—É–µ—Ç—Å—è –∏–∑ common.py, –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ utils)
async def trigger_regen_check(user_id: int, state: FSMContext):
     try:
        current_state_str = await state.get_state()
        await check_and_apply_regen(user_id, current_state_str)
     except Exception as e:
         logging.error(f"Error during regen check in stats handler for user {user_id}: {e}", exc_info=False)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ ---
def get_stat_allocation_keyboard(player_stats: types.User) -> InlineKeyboardMarkup: # player_stats - —ç—Ç–æ sqlite3.Row
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—á–∫–∏.
    """
    buttons = []
    logging.debug(f"[get_stat_keyboard] Input player_stats type: {type(player_stats)}")
    # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á—É [] ---
    try:
        available_points = player_stats['stat_points']
        if not isinstance(available_points, int):
            logging.warning(f"[get_stat_keyboard] 'stat_points' is not an integer: {available_points}. Defaulting to 0.")
            available_points = 0
    except KeyError:
        logging.error("[get_stat_keyboard] KeyError: 'stat_points' not found in player_stats. Defaulting to 0.")
        available_points = 0
    except Exception as e:
        logging.error(f"[get_stat_keyboard] Error accessing 'stat_points': {e}. Defaulting to 0.")
        available_points = 0

    logging.debug(f"[get_stat_keyboard] Calculated available_points: {available_points}")

    if available_points > 0:
        logging.debug("[get_stat_keyboard] Points > 0. Generating attribute buttons...")
        for attr_code, attr_name in ATTRIBUTE_NAMES.items():
            logging.debug(f"[get_stat_keyboard] Processing attribute: {attr_code}")
            try:
                # --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á—É [] ---
                current_value = player_stats[attr_code]
                if not isinstance(current_value, (int, float)):
                     logging.warning(f"[get_stat_keyboard] '{attr_code}' is not a number: {current_value}. Defaulting to 0.")
                     current_value = 0
            except KeyError:
                logging.error(f"[get_stat_keyboard] KeyError: '{attr_code}' not found. Defaulting to 0.")
                current_value = 0
            except Exception as e:
                 logging.error(f"[get_stat_keyboard] Error accessing '{attr_code}': {e}. Defaulting to 0.")
                 current_value = 0

            logging.debug(f"[get_stat_keyboard] Current value for {attr_code}: {current_value}. Adding button.")
            buttons.append([
                InlineKeyboardButton(
                    text=f"{attr_name}: {current_value} (+1)",
                    callback_data=f"allocate:{attr_code}"
                )
            ])
    else:
        logging.debug("[get_stat_keyboard] No points available. Adding 'noop' button.")
        buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–∫–æ–≤", callback_data="allocate:noop")])

    logging.debug("[get_stat_keyboard] Adding 'Cancel' button.")
    buttons.append([InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="allocate:cancel")])

    logging.debug(f"[get_stat_keyboard] Final buttons list: {buttons}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    logging.debug(f"[get_stat_keyboard] Generated keyboard JSON: {keyboard.model_dump_json(exclude_none=True)}")
    return keyboard


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–∫–∞—á–∫–∞" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text.lower() == "üí™ –ø—Ä–æ–∫–∞—á–∫–∞")
async def stats_allocation_start(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–∫–∞—á–∫–∞'.
    """
    user_id = message.from_user.id
    logging.info(f"User {user_id} initiated stat allocation via button.")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
    await trigger_regen_check(user_id, state)
    player = await get_player(user_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_player, —Ç.–∫. –Ω—É–∂–Ω—ã –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã –∏ –æ—á–∫–∏

    if not player:
        logging.warning(f"Non-player {user_id} tried to access stat allocation.")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î
    try:
        retrieved_stat_points = player['stat_points']
        logging.info(f"User {user_id} - Checking stat points. Retrieved value from DB: {retrieved_stat_points} (Type: {type(retrieved_stat_points)})")
    except KeyError:
        retrieved_stat_points = 0
        logging.error(f"User {user_id} - 'stat_points' key not found in player data!")
    except Exception as e:
        retrieved_stat_points = 0
        logging.error(f"User {user_id} - Error retrieving stat_points: {e}")

    available_points = retrieved_stat_points if isinstance(retrieved_stat_points, int) else 0

    if available_points > 0:
        logging.info(f"User {user_id} has {available_points} points. Generating keyboard...")
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
            keyboard = get_stat_allocation_keyboard(player)
            logging.debug(f"Keyboard generated for user {user_id}: {keyboard.model_dump_json(exclude_none=True)}")

            await message.answer(
                f"–£ –≤–∞—Å –µ—Å—Ç—å <b>{available_points}</b> —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—É–¥–∞ –≤–ª–æ–∂–∏—Ç—å –æ—á–∫–æ:",
                reply_markup=keyboard, # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                parse_mode="HTML"
            )
            await state.set_state(StatAllocationStates.choosing_attribute) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logging.info(f"Allocation menu sent to user {user_id}. State set to choosing_attribute.")
        except Exception as e:
            logging.error(f"Error generating or sending keyboard for user {user_id}: {e}", exc_info=True)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –ø—Ä–æ–∫–∞—á–∫–∏.")

    else:
        logging.info(f"User {user_id} has no stat points (available_points calculated as {available_points}). Showing 'no points' message.")
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.\n"
            "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∏—Ö –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
@router.callback_query(StatAllocationStates.choosing_attribute, F.data.startswith("allocate:"))
async def process_stat_allocation(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∞—Ç—Ä–∏–±—É—Ç–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_attribute.
    """
    await callback.answer() # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏
    user_id = callback.from_user.id
    action_data = callback.data.split(":")
    action = action_data[1]

    logging.info(f"User {user_id} pressed allocation button: {action} in state {await state.get_state()}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫
    if action == "cancel":
        logging.info(f"User {user_id} finished stat allocation via 'Cancel' button.")
        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_text("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=None)
        except TelegramBadRequest as e: # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
             if "message is not modified" in str(e): logging.debug("Message not modified on allocation cancel.")
             else: logging.warning(f"Could not edit message on allocation cancel: {e}")
        except Exception as e:
             logging.warning(f"Could not edit message on allocation cancel: {e}")
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    if action == "noop":
        logging.debug(f"User {user_id} pressed 'noop' allocation button.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å show_alert=True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —è–≤–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ—á–∫–æ–≤ –Ω–µ—Ç
        # await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–∫–æ–≤.", show_alert=True)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–∞
    attribute_to_increase = action
    if attribute_to_increase not in ATTRIBUTE_NAMES:
         logging.error(f"Invalid attribute '{attribute_to_increase}' in allocation callback data: {callback.data} for user {user_id}")
         try:
             await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)
         except Exception as e: logging.warning(f"Could not edit message on invalid attribute error: {e}")
         await state.clear()
         return

    # –õ–æ–≥–∏–∫–∞ —Ç—Ä–∞—Ç—ã –æ—á–∫–∞ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∞
    player_before = await get_player(user_id) # –°–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not player_before:
        logging.error(f"Could not retrieve player data for {user_id} during stat allocation processing.")
        try: await callback.message.edit_text("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.", reply_markup=None)
        except Exception as e: logging.warning(f"Could not edit message on player data retrieval error: {e}")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—á–∫–æ–≤ –ø–µ—Ä–µ–¥ —Ç—Ä–∞—Ç–æ–π
    if player_before['stat_points'] <= 0:
        logging.warning(f"User {user_id} tried to allocate stats via callback but has 0 points (state: {await state.get_state()}).")
        try:
             await callback.message.edit_text("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –æ—á–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.", reply_markup=None)
        except Exception as e: logging.warning(f"Could not edit message after running out of points via callback: {e}")
        await state.clear()
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –æ—á–∫–∏ –ò —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç
    await update_stat_points(user_id, -1) # –¢—Ä–∞—Ç–∏–º 1 –æ—á–∫–æ
    increase_success = await increase_attribute(user_id, attribute_to_increase, 1)

    if not increase_success:
        logging.error(f"Failed to increase attribute {attribute_to_increase} for user {user_id} after attempting to spend point.")
        try:
            await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É. –û—á–∫–æ –Ω–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã).", reply_markup=None)
        except Exception as e: logging.warning(f"Could not edit message on attribute increase failure: {e}")
        await update_stat_points(user_id, 1) # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –æ—á–∫–æ
        await state.clear()
        return

    # –£—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–∫–∞
    player_after = await get_player(user_id) # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not player_after:
         logging.error(f"Could not retrieve updated player data for {user_id} after successful stat allocation.")
         try:
             await callback.message.edit_text(f"–û—á–∫–æ –≤–ª–æ–∂–µ–Ω–æ –≤ {ATTRIBUTE_NAMES[attribute_to_increase]}! (–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)", reply_markup=None)
         except Exception as e: logging.warning(f"Could not edit message after failed data retrieval post-allocation: {e}")
         await state.clear()
         return

    available_points_after = player_after['stat_points']
    new_stat_value = player_after[attribute_to_increase]
    logging.info(f"User {user_id} successfully allocated 1 point to {attribute_to_increase}. New value: {new_stat_value}. Points left: {available_points_after}")

    feedback_text = f"–í—ã –≤–ª–æ–∂–∏–ª–∏ –æ—á–∫–æ –≤ {ATTRIBUTE_NAMES[attribute_to_increase]}! (–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_stat_value})\n"

    if available_points_after > 0:
         feedback_text += f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>{available_points_after}</b> –æ—á–∫–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ:"
         new_keyboard = get_stat_allocation_keyboard(player_after) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
         try:
             await callback.message.edit_text(feedback_text, reply_markup=new_keyboard, parse_mode="HTML")
             logging.debug(f"Allocation message updated for user {user_id}. Points left: {available_points_after}")
         except TelegramBadRequest as e:
             if "message is not modified" in str(e): logging.debug(f"Message not modified for user {user_id}, points left {available_points_after}.")
             else: logging.error(f"Error editing message after stat allocation for {user_id}: {e}")
         except Exception as e:
              logging.error(f"Error editing message after stat allocation for {user_id}: {e}")
         # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_attribute
    else:
         feedback_text += "–í—Å–µ –æ—á–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã."
         try:
             await callback.message.edit_text(feedback_text, reply_markup=None, parse_mode="HTML") # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
             logging.info(f"User {user_id} spent all allocation points. Clearing state.")
         except TelegramBadRequest as e:
              if "message is not modified" in str(e): logging.debug("Message not modified on final allocation.")
              else: logging.error(f"Error editing final stat allocation message for user {user_id}: {e}")
         except Exception as e:
              logging.error(f"Error editing final stat allocation message for user {user_id}: {e}")
         await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–∫–∞—á–∫–∏ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data.startswith("allocate:"))
async def handle_allocate_action_outside_state(callback: types.CallbackQuery, state: FSMContext): # –î–æ–±–∞–≤–∏–ª–∏ state –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """–õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ allocate:, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_attribute."""
    logging.warning(f"User {callback.from_user.id} pressed allocate button outside of state '{await state.get_state()}'. Callback: {callback.data}")
    await callback.answer("–≠—Ç–æ –º–µ–Ω—é –ø—Ä–æ–∫–∞—á–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.", show_alert=True)
    try:
        # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"Could not edit old allocation message markup when handling outside state action: {e}")

# --- –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ handlers/stats.py ---
