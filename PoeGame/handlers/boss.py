# handlers/boss.py
import logging
import time
import random
import math
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd
from aiogram.exceptions import TelegramBadRequest # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –ë–î
from database.db_manager import (
    get_player_effective_stats, update_player_vitals, update_player_xp,
    # update_quest_progress, clear_daily_quest, # –£–±—Ä–∞–ª, —Ç.–∫. –∫–≤–µ—Å—Ç—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –±–æ—Å—Å–æ–≤
    apply_death_penalty,
    check_and_apply_regen, add_item_to_inventory,
    get_player_boss_progression, update_player_boss_progression,
    get_boss_cooldown, set_boss_cooldown,
    get_learned_spells # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ–ª–ª–æ–≤
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
from game_data import (
    BOSSES, SPELLS, ALL_ITEMS, ITEM_TYPE_FRAGMENT, ITEM_TYPE_LEGENDARY,
    get_random_legendary_item_id,
    calculate_final_spell_damage, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Ä–æ–Ω–∞ —Å–ø–µ–ª–ª–æ–≤
    calculate_damage_with_crit # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫—Ä–∏—Ç–∞
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ (–ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ utils)
try:
    from handlers.combat import (
        calculate_player_attack_damage, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        # calculate_spell_damage, # –°—Ç–∞—Ä–∞—è –Ω–µ –Ω—É–∂–Ω–∞
        calculate_dodge_chance,
        calculate_damage_reduction
    )
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CombatStates –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–µ–Ω–∞
    from handlers.combat import CombatStates
except ImportError as e:
    logging.error(f"Could not import helpers from handlers.combat in boss.py: {e}")
    # –ó–∞–≥–ª—É—à–∫–∏
    def calculate_player_attack_damage(s, cc, cd): return calculate_damage_with_crit(max(1,s//2), cc, cd) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫—Ä–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é
    # def calculate_spell_damage(d, cc, cd): return calculate_damage_with_crit(d.get('damage', 1), cc, cd) # –°—Ç–∞—Ä–∞—è –Ω–µ –Ω—É–∂–Ω–∞
    def calculate_dodge_chance(d): return 0
    def calculate_damage_reduction(a): return 0
    class CombatStates: fighting = type("State", (), {"state": "CombatStates:fighting"})()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")
router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOSS_COOLDOWN_SECONDS = 60 * 60 # 1 —á–∞—Å
LEGENDARY_DROP_CHANCE = 0.02 # 2%

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ë–æ—è —Å –ë–æ—Å—Å–æ–º ---
class BossCombatStates(StatesGroup):
    fighting = State()
    selecting_boss = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_boss_selection_keyboard(unlocked_index: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Å—Å–æ–≤."""
    buttons = []
    num_bosses = len(BOSSES)
    for i in range(num_bosses):
        boss_data = BOSSES[i]
        boss_id_str = str(i) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ ID –¥–ª—è callback
        if i <= unlocked_index:
            buttons.append([InlineKeyboardButton(text=f"üíÄ {boss_data['name']} (–£—Ä. {i+1})", callback_data=f"boss_select:{boss_id_str}")])
        else:
            buttons.append([InlineKeyboardButton(text=f"üîí ??? (–£—Ä. {i+1})", callback_data="boss_locked")])
    buttons.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="boss_select:cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ò–°–ü–†–ê–í–õ–ï–ù–û: async def ---
async def get_boss_combat_action_keyboard(user_id: int, boss_id: str, player_mana: int, active_effects: dict) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—é —Å –±–æ—Å—Å–æ–º, –≤–∫–ª—é—á–∞—è –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ø–µ–ª–ª—ã."""
    buttons = [
        [InlineKeyboardButton(text="üó°Ô∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"boss_action:attack:{boss_id}")],
    ]
    learned_spells = await get_learned_spells(user_id) # –ü–æ–ª—É—á–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ø–µ–ª–ª—ã
    try: # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –º–∞–Ω—ã
         mana_multiplier = float(active_effects.get('mana_cost_multiplier', 1.0))
         if mana_multiplier <= 0: mana_multiplier = 1.0 # –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    except (ValueError, TypeError): mana_multiplier = 1.0

    for spell_data in learned_spells:
        spell_id = spell_data['id']
        spell_name = spell_data['name']
        try: # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
             base_mana_cost = int(spell_data['mana_cost'])
             actual_mana_cost = math.ceil(base_mana_cost * mana_multiplier)
        except (ValueError, TypeError, KeyError):
             logging.warning(f"Invalid mana cost for spell {spell_id}. Skipping.")
             continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–µ–ª–ª —Å –Ω–µ–≤–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é

        cost_text = f" ({actual_mana_cost} –ú–∞–Ω—ã)"

        if player_mana >= actual_mana_cost:
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ú® {hd.quote(spell_name)}{cost_text}",
                    callback_data=f"boss_action:{spell_id}:{boss_id}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–ø–µ–ª–ª–∞
                )
            ])
        else:
             buttons.append([
                InlineKeyboardButton(
                    text=f"‚ùå {hd.quote(spell_name)}{cost_text}",
                    callback_data=f"boss_action:no_mana"
                )
            ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã –ë–æ—Å—Å
@router.message(F.text.lower() == "üíÄ –±–æ–π —Å –±–æ—Å—Å–æ–º")
async def select_boss_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} requested boss fight selection.")
    try: await check_and_apply_regen(user_id, await state.get_state())
    except Exception as e: logging.error(f"Regen check error for boss selection {user_id}: {e}")

    unlocked_index = await get_player_boss_progression(user_id)
    keyboard = get_boss_selection_keyboard(unlocked_index)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Å—Å–∞ –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(BossCombatStates.selecting_boss)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Å—Å–∞
@router.callback_query(BossCombatStates.selecting_boss, F.data == "boss_locked")
async def handle_locked_boss(callback: types.CallbackQuery):
    await callback.answer("–í—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Å—Å–∞! –ü–æ–±–µ–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–∞
@router.callback_query(BossCombatStates.selecting_boss, F.data == "boss_select:cancel")
async def handle_cancel_boss_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–í—ã–±–æ—Ä –±–æ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: try —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç—Å—Ç—É–ø–æ–º ---
    try:
        await callback.message.delete()
    except Exception:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –±–æ—Å—Å–∞
@router.callback_query(BossCombatStates.selecting_boss, F.data.startswith("boss_select:"))
async def start_boss_fight(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        boss_index = int(callback.data.split(":")[1])
        if not (0 <= boss_index < len(BOSSES)): raise ValueError("Invalid boss index")
        boss_id_str = str(boss_index)
        boss_data = BOSSES[boss_index]
        boss_name = boss_data['name']
    except (IndexError, ValueError) as e:
        logging.error(f"Invalid boss selection callback data: {callback.data} - {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–∞.", show_alert=True)
        await state.clear()
        try: await callback.message.delete()
        except Exception: pass
        return

    logging.info(f"User {user_id} selected boss {boss_id_str} ('{boss_name}')")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_kill_time = await get_boss_cooldown(user_id, boss_id_str)
    current_time = int(time.time())
    time_since_kill = current_time - last_kill_time
    if 0 < time_since_kill < BOSS_COOLDOWN_SECONDS:
        time_left = BOSS_COOLDOWN_SECONDS - time_since_kill
        minutes, seconds = divmod(time_left, 60)
        time_left_str = f"{int(minutes)} –º–∏–Ω {int(seconds)} —Å–µ–∫" if minutes > 0 else f"{int(seconds)} —Å–µ–∫"
        await callback.answer(f"–ë–æ—Å—Å '{boss_name}' –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ! –û—Å—Ç–∞–ª–æ—Å—å: {time_left_str}.", show_alert=True)
        logging.info(f"User {user_id} tried to fight boss {boss_id_str} on cooldown.")
        return # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ HP –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ES
    player = await get_player_effective_stats(user_id)
    if not player:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞.", show_alert=True)
        await state.clear();
        try:
            await callback.message.delete()
        except Exception:
            pass
        return
    if player['current_hp'] <= 0:
        await callback.answer("–í—ã –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è! –°–Ω–∞—á–∞–ª–∞ –∏—Å—Ü–µ–ª–∏—Ç–µ—Å—å.", show_alert=True)
        return

    if player['energy_shield'] < player['max_energy_shield']:
        logging.info(f"Restoring ES for player {user_id} before boss fight.")
        await update_player_vitals(user_id, set_es=player['max_energy_shield'])
        player = await get_player_effective_stats(user_id)
        if not player: await callback.answer("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—â–∏—Ç–∞.", show_alert=True); return

    # 3. –°–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Å—Å–∞
    scale_factor = 2 ** boss_index
    scaled_hp = math.ceil(boss_data['base_hp'] * scale_factor)
    scaled_damage = math.ceil(boss_data['base_damage'] * scale_factor)
    scaled_xp = math.ceil(100 * (scale_factor * 1.5))
    scaled_gold = math.ceil(50 * scale_factor)

    logging.info(f"Player {user_id} starting fight with BOSS {boss_id_str} ('{boss_name}'). Scaled HP: {scaled_hp}, Dmg: {scaled_damage}, XP: {scaled_xp}, Gold: {scaled_gold}")

    # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
    await state.set_state(BossCombatStates.fighting)
    await state.update_data(
        boss_id=boss_id_str,
        boss_name=boss_name,
        boss_hp=scaled_hp,
        boss_max_hp=scaled_hp,
        boss_damage=scaled_damage,
        boss_xp_reward=scaled_xp,
        boss_gold_reward=scaled_gold,
        fragment_item_id=boss_data['fragment_item_id'],
        player_buffs={} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞—Ñ—Ñ–æ–≤
    )

    # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –±–æ—è
    keyboard = await get_boss_combat_action_keyboard(user_id, boss_id_str, player['current_mana'], player.get('active_effects',{}))
    try:
        await callback.message.edit_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –±–æ—Å—Å–∞
            f"–í—ã –≤—Å—Ç—É–ø–∞–µ—Ç–µ –≤ –±–æ–π —Å <b>{hd.quote(boss_name)}</b>!\n"
            f"‚ù§Ô∏è HP: {scaled_hp} | ‚öîÔ∏è –£—Ä–æ–Ω: {scaled_damage}\n\n"
            f"–í–∞—à–∏ —Å—Ç–∞—Ç—ã:\n"
            f"‚ù§Ô∏è HP: {player['current_hp']}/{player['max_hp']} | üõ°Ô∏è ES: {player['energy_shield']}/{player['max_energy_shield']} | üíß Mana: {player['current_mana']}/{player['max_mana']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
         logging.error(f"Failed to edit message for boss fight start: {e}")
         await callback.message.answer( # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
             f"–í—ã –≤—Å—Ç—É–ø–∞–µ—Ç–µ –≤ –±–æ–π —Å <b>{hd.quote(boss_name)}</b>!\n"
             f"‚ù§Ô∏è HP: {scaled_hp} | ‚öîÔ∏è –£—Ä–æ–Ω: {scaled_damage}\n\n"
             f"–í–∞—à–∏ —Å—Ç–∞—Ç—ã:\n"
             f"‚ù§Ô∏è HP: {player['current_hp']}/{player['max_hp']} | üõ°Ô∏è ES: {player['energy_shield']}/{player['max_energy_shield']} | üíß Mana: {player['current_mana']}/{player['max_mana']}\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
             reply_markup=keyboard, parse_mode="HTML"
         )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—é —Å –±–æ—Å—Å–æ–º
@router.callback_query(BossCombatStates.fighting, F.data.startswith("boss_action:"))
async def handle_boss_combat_action(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id

    player = await get_player_effective_stats(user_id)
    state_data = await state.get_data()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    boss_id = state_data.get("boss_id")
    boss_name = state_data.get("boss_name")
    current_boss_hp = state_data.get("boss_hp")
    boss_max_hp = state_data.get("boss_max_hp")
    boss_damage = state_data.get("boss_damage")
    boss_xp_reward = state_data.get("boss_xp_reward")
    boss_gold_reward = state_data.get("boss_gold_reward")
    fragment_item_id = state_data.get("fragment_item_id")
    current_buffs = state_data.get("player_buffs", {}) # –ë–∞—Ñ—Ñ—ã —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ö–æ–¥–∞

    if (not player or boss_id is None or boss_name is None or current_boss_hp is None or
            boss_max_hp is None or boss_damage is None or boss_xp_reward is None or
            boss_gold_reward is None or fragment_item_id is None):
        logging.error(f"Incomplete boss combat state for user {user_id}. Data: {state_data}")
        try: await callback.message.edit_text("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è —Å –±–æ—Å—Å–æ–º. –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω.")
        except Exception: pass
        await state.clear(); return

    action_data = callback.data.split(":")
    action_type = action_data[1]

    if action_type == "no_mana": return

    # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ ---
    player_damage_dealt = 0; mana_cost = 0; action_log = ""; is_crit = False; healed_amount = 0; applied_buffs = {}

    # --- –≠—Ñ—Ñ–µ–∫—Ç—ã –∏ –ë–∞—Ñ—Ñ—ã ---
    active_effects = player.get('active_effects', {});
    try: mana_multiplier = float(active_effects.get('mana_cost_multiplier', 1.0)); mana_multiplier = max(0, mana_multiplier)
    except (ValueError, TypeError): mana_multiplier = 1.0
    try: crit_mult_bonus = float(active_effects.get('crit_multiplier_bonus', 0))
    except (ValueError, TypeError): crit_mult_bonus = 0

    # --- –õ–æ–≥–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ ---
    if action_type == "attack":
        attack_multiplier = current_buffs.get("buff_next_attack", 1.0)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ combat (–∏–ª–∏ utils)
        player_damage_dealt, is_crit = calculate_player_attack_damage(player['strength'], player['crit_chance'], player['crit_damage'] + crit_mult_bonus)
        player_damage_dealt = math.ceil(player_damage_dealt * attack_multiplier) # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—Ñ
        crit_text = "üí•<b>–ö–†–ò–¢!</b> " if is_crit else ""; buff_text = f"(x{attack_multiplier:.1f}!) " if attack_multiplier > 1.0 else ""
        action_log = f"–í—ã –∞—Ç–∞–∫–æ–≤–∞–ª–∏ üó°Ô∏è {buff_text}{crit_text}–∏ –Ω–∞–Ω–µ—Å–ª–∏ {player_damage_dealt} —É—Ä–æ–Ω–∞."
        if "buff_next_attack" in current_buffs: del current_buffs["buff_next_attack"] # –£–¥–∞–ª—è–µ–º –±–∞—Ñ—Ñ

    else: # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
        spell_id = action_type
        spell_data = SPELLS.get(spell_id)
        if not spell_data: await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True); return

        try: base_mana_cost = int(spell_data['mana_cost']); actual_mana_cost = math.ceil(base_mana_cost * mana_multiplier)
        except Exception: actual_mana_cost = 99999

        if player['current_mana'] >= actual_mana_cost:
            mana_cost = actual_mana_cost; spell_name = spell_data['name']; cost_text = f" ({mana_cost} –ú)"
            effect_type = spell_data.get('effect_type'); effect_value = spell_data.get('effect_value'); duration = spell_data.get('duration', 0)
            action_log = f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ‚ú® {hd.quote(spell_name)}{cost_text}"

            if effect_type == "damage":
                base_damage = effect_value; final_base_damage = calculate_final_spell_damage(base_damage, player['intelligence'])
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º calculate_damage_with_crit –¥–ª—è –∫—Ä–∏—Ç–∞
                player_damage_dealt, is_crit = calculate_damage_with_crit(final_base_damage, player['crit_chance'], player['crit_damage'] + crit_mult_bonus)
                crit_text = "üí•<b>–ö–†–ò–¢!</b> " if is_crit else ""; action_log += f", {crit_text}–Ω–∞–Ω–µ—Å—è {player_damage_dealt} —É—Ä–æ–Ω–∞."
            elif effect_type == "heal_percent":
                percent = effect_value; heal_calc = math.ceil(player['max_hp'] * (percent / 100.0))
                heal_actual = min(heal_calc, player['max_hp'] - player['current_hp']); healed_amount = heal_actual
                action_log += f", –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–≤ {healed_amount} –∑–¥–æ—Ä–æ–≤—å—è."
            elif effect_type == "buff_next_attack":
                applied_buffs["buff_next_attack"] = effect_value; action_log += f", —É—Å–∏–ª–∏–≤ —Å–ª–µ–¥. –∞—Ç–∞–∫—É (x{effect_value:.1f})."
            elif effect_type == "temp_buff":
                if isinstance(effect_value, dict) and duration > 0:
                     buff_log_parts = []
                     for stat_name, buff_val in effect_value.items():
                         applied_buffs[f"temp_{stat_name}"] = {'value': buff_val, 'duration': duration}
                         buff_log_parts.append(f"+{buff_val} {stat_name}")
                     if buff_log_parts: action_log += f", —É—Å–∏–ª–∏–≤ {', '.join(buff_log_parts)} –Ω–∞ {duration} —Ö–æ–¥–∞."
                     else: action_log += ", –Ω–æ –±–∞—Ñ—Ñ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö)."
                else: action_log += ", –Ω–æ –±–∞—Ñ—Ñ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)."
            else: action_log += ", –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)."
        else: await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã!", show_alert=True); return

    # --- –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è HP/Mana –∏–≥—Ä–æ–∫–∞ ---
    await update_player_vitals(user_id, hp_change=healed_amount, mana_change=-mana_cost)

    # --- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ñ—Ñ—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM ---
    next_turn_buffs = {} # –ë–∞—Ñ—Ñ—ã –¥–ª—è –°–õ–ï–î–£–Æ–©–ï–ì–û —Ö–æ–¥–∞
    buffs_expired_log = []
    for buff_key, buff_data in current_buffs.items(): # –û–±—Ö–æ–¥–∏–º –±–∞—Ñ—Ñ—ã —Å –ü–†–û–®–õ–û–ì–û —Ö–æ–¥–∞
        if isinstance(buff_data, dict) and 'duration' in buff_data:
            remaining_duration = buff_data['duration'] - 1
            if remaining_duration > 0: next_turn_buffs[buff_key] = {'value': buff_data['value'], 'duration': remaining_duration}
            else: buffs_expired_log.append(buff_key.replace('temp_', ''))
    if buffs_expired_log: logging.info(f"Buffs expired for user {user_id}: {', '.join(buffs_expired_log)}")
    next_turn_buffs.update(applied_buffs) # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–º–∏ –±–∞—Ñ—Ñ–∞–º–∏
    await state.update_data(player_buffs=next_turn_buffs) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
    logging.debug(f"Player {user_id} buffs for next turn: {next_turn_buffs}")

    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –±–æ—Å—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã ---
    new_boss_hp = current_boss_hp
    if player_damage_dealt > 0:
        new_boss_hp = max(0, current_boss_hp - player_damage_dealt)
        await state.update_data(boss_hp=new_boss_hp)

    if new_boss_hp <= 0: # –ü–æ–±–µ–¥–∞
        logging.info(f"Player {user_id} DEFEATED BOSS {boss_id} ('{boss_name}')!")
        xp_gain = boss_xp_reward; gold_gain = boss_gold_reward
        # –≠—Ñ—Ñ–µ–∫—Ç –∑–æ–ª–æ—Ç–∞
        try: triple_gold_chance = float(active_effects.get('triple_gold_chance', 0))
        except (ValueError, TypeError): triple_gold_chance = 0
        if random.uniform(0, 100) < triple_gold_chance: gold_gain *= 3; loot_log = f"üí∞ <b>–£–¢–†–û–ï–ù–ù–û–ï</b> –∑–æ–ª–æ—Ç–æ: {gold_gain}!\n"
        else: loot_log = f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ {gold_gain} –∑–æ–ª–æ—Ç–∞.\n"
        # –î—Ä–æ–ø —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        fragment_info = ALL_ITEMS.get(fragment_item_id); fragment_log = ""
        if fragment_info:
            if await add_item_to_inventory(user_id, fragment_item_id): fragment_log = f"üíé –§—Ä–∞–≥–º–µ–Ω—Ç: <b>{hd.quote(fragment_info['name'])}</b>!\n"
        # –®–∞–Ω—Å –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–∫—É
        legendary_log = ""
        if random.random() < LEGENDARY_DROP_CHANCE:
            legendary_id = get_random_legendary_item_id()
            if legendary_id:
                 legendary_info = ALL_ITEMS.get(legendary_id)
                 if legendary_info and await add_item_to_inventory(user_id, legendary_id):
                     legendary_log = f"‚ú®‚ú® <b>–õ–ï–ì–ï–ù–î–ê–†–ö–ê: {hd.quote(legendary_info['name'])}</b>!!! ‚ú®‚ú®\n"
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ XP/–ó–æ–ª–æ—Ç–∞, –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∫—É–ª–¥–∞—É–Ω–∞
        xp_update_result, leveled_up = await update_player_xp(user_id, gained_xp=xp_gain, gained_gold=gold_gain)
        boss_index = int(boss_id); await update_player_boss_progression(user_id, boss_index); await set_boss_cooldown(user_id, boss_id)
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ES
        player_after_boss = await get_player_effective_stats(user_id)
        if player_after_boss and player_after_boss['energy_shield'] < player_after_boss['max_energy_shield']:
             await update_player_vitals(user_id, set_es=player_after_boss['max_energy_shield'])
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π –∏ —Ä–µ–≥–µ–Ω
        await state.clear(); await check_and_apply_regen(user_id, None)
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        level_up_log = ""
        if leveled_up and xp_update_result: level_up_log = (f"üéâ<b>–£–†–û–í–ï–ù–¨ {xp_update_result['level']}!</b> (+{xp_update_result['gained_stat_points']} –æ—á–∫–∞)üéâ\n")
        result_text = (f"{action_log}\n\n"
                       f"üî•üî•üî• <b>–ü–û–ë–ï–î–ê: {hd.quote(boss_name)}!</b> üî•üî•üî•\n\n"
                       f"‚ú® +{xp_gain} –æ–ø—ã—Ç–∞.\n{loot_log}{fragment_log}{legendary_log}{level_up_log}"
                       f"\n<i>–ë–æ—Å—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {BOSS_COOLDOWN_SECONDS // 60} –º–∏–Ω.</i>")
        try: await callback.message.edit_text(result_text, parse_mode="HTML")
        except Exception as e: await callback.message.answer(result_text, parse_mode="HTML")
        return

    # --- –•–æ–¥ –ë–æ—Å—Å–∞ ---
    boss_raw_damage = boss_damage; dodge_chance = calculate_dodge_chance(player['dexterity'])
    # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞—Ñ—Ñ—ã –±—Ä–æ–Ω–∏ –∏–≥—Ä–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ö–æ–¥–∞
    current_turn_buffs = next_turn_buffs
    player_armor = player['armor'] + current_turn_buffs.get('temp_armor', {}).get('value', 0)
    player_damage_reduction = calculate_damage_reduction(player_armor)
    player_hp_loss = 0; boss_action_log = ""
    if random.uniform(0, 100) < dodge_chance:
        boss_action_log = f"<b>{hd.quote(boss_name)}</b> –∞—Ç–∞–∫–æ–≤–∞–ª, –Ω–æ –≤—ã —É–≤–µ—Ä–Ω—É–ª–∏—Å—å! üí®"
    else:
        actual_damage = max(1, boss_raw_damage - player_damage_reduction)
        player_hp_loss = actual_damage
        reduction_text = f" (-{player_damage_reduction} –±—Ä–æ–Ω—è{'üõ°Ô∏è' if current_turn_buffs.get('temp_armor') else ''})" if player_damage_reduction > 0 else ""
        boss_action_log = f"<b>{hd.quote(boss_name)}</b> –∞—Ç–∞–∫–æ–≤–∞–ª üëπ –∏ –Ω–∞–Ω–µ—Å –≤–∞–º <b>{actual_damage}</b> —É—Ä–æ–Ω–∞{reduction_text}."

    # --- –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ç–∞–ª—ã –∏–≥—Ä–æ–∫–∞ –ü–û–°–õ–ï —Ö–æ–¥–∞ –±–æ—Å—Å–∞ ---
    logging.info(f"[handle_boss_combat_action CALLING_VITALS for boss attack] User {user_id}: hp_change={-player_hp_loss}")
    new_hp, new_mana, new_es = await update_player_vitals(user_id, hp_change=-player_hp_loss)
    logging.info(f"[handle_boss_combat_action VITALS_RETURNED after boss] User {user_id}: NewHP={new_hp}, NewMana={new_mana}, NewES={new_es}")

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ---
    if new_hp <= 0: # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
        logging.info(f"Player {user_id} was defeated by BOSS {boss_id} ('{boss_name}').")
        xp_penalty, gold_penalty = await apply_death_penalty(user_id); penalty_log = f"‚ò†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ: {xp_penalty} XP, {gold_penalty} üí∞."
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ES
        player_after_death_b = await get_player_effective_stats(user_id)
        if player_after_death_b: await update_player_vitals(user_id, set_es=player_after_death_b['max_energy_shield'])
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–æ–π –∏ —Ä–µ–≥–µ–Ω
        await state.clear(); await check_and_apply_regen(user_id, None)
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        result_text = (f"{action_log}\n{boss_action_log}\n\n"
                       f"<b>–í—ã –ø–æ–≤–µ—Ä–∂–µ–Ω—ã: {hd.quote(boss_name)}...</b> üíÄ\n{penalty_log}")
        try: await callback.message.edit_text(result_text, parse_mode="HTML")
        except Exception as e: await callback.message.answer(result_text, parse_mode="HTML")
        return

    # --- –ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è ---
    updated_player = await get_player_effective_stats(user_id)
    if not updated_player: await callback.message.edit_text("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω."); await state.clear(); return
    keyboard = await get_boss_combat_action_keyboard(user_id, boss_id, updated_player['current_mana'], updated_player.get('active_effects', {}))
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞—Ñ—Ñ–æ–≤
    active_buff_texts = []
    for buff_key, buff_data in next_turn_buffs.items():
         if isinstance(buff_data, dict) and 'duration' in buff_data: active_buff_texts.append(f"{buff_key.replace('temp_', '').capitalize()} (+{buff_data['value']}) [{buff_data['duration']} —Ö.]")
         elif buff_key == "buff_next_attack": active_buff_texts.append(f"–£—Å–∏–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ (x{buff_data:.1f})")
    buff_display = " / ".join(active_buff_texts); buff_line = f"\n<i>–≠—Ñ—Ñ–µ–∫—Ç—ã: {buff_display}</i>" if buff_display else ""
    # –°–æ–æ–±—â–µ–Ω–∏–µ
    result_text = (f"{action_log}\n{boss_action_log}\n\n"
                   f"<b>{hd.quote(boss_name)}</b>\n‚ù§Ô∏è HP: {new_boss_hp}/{boss_max_hp}\n\n"
                   f"<b>–í–∞—à–∏ —Å—Ç–∞—Ç—ã:</b>\n‚ù§Ô∏è HP: {updated_player['current_hp']}/{updated_player['max_hp']} | üõ°Ô∏è ES: {updated_player['energy_shield']}/{updated_player['max_energy_shield']} | üíß Mana: {updated_player['current_mana']}/{updated_player['max_mana']}"
                   f"{buff_line}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    try:
        await callback.message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        logging.error(f"Error editing boss combat message: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ—è. –ë–æ–π –ø—Ä–µ—Ä–≤–∞–Ω."); await state.clear()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –±–æ—Å—Å–∞ –í–ù–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
@router.callback_query(F.data.startswith("boss_action:"))
async def handle_boss_action_outside_state(callback: types.CallbackQuery, state: FSMContext):
    logging.warning(f"User {callback.from_user.id} pressed boss_action button outside of state '{await state.get_state()}'. CB: {callback.data}")
    await callback.answer("–≠—Ç–æ—Ç –±–æ–π —Å –±–æ—Å—Å–æ–º —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)
    try: await callback.message.edit_reply_markup(reply_markup=None)
    except Exception: pass

@router.callback_query(F.data.startswith("boss_select:"))
async def handle_boss_select_outside_state(callback: types.CallbackQuery, state: FSMContext):
     logging.warning(f"User {callback.from_user.id} pressed boss_select button outside of state '{await state.get_state()}'. CB: {callback.data}")
     await callback.answer("–í—ã–±–æ—Ä –±–æ—Å—Å–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.", show_alert=True)
     try: await callback.message.edit_reply_markup(reply_markup=None)
     except Exception: pass

# --- –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ handlers/boss.py ---
