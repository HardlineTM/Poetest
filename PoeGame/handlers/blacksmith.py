# handlers/blacksmith.py
import logging
import time
import random
import math # –î–æ–±–∞–≤–∏–º math –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd
from aiogram.exceptions import TelegramBadRequest # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –ë–î
from database.db_manager import (
    get_blacksmith_items, update_blacksmith_items,
    get_player_effective_stats, check_and_apply_regen,
    # count_player_fragments, # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Å—á–∏—Ç–∞–µ–º –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
    get_inventory_items, # –ù—É–∂–Ω–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    remove_player_fragments, add_item_to_inventory,
    update_player_xp # –ù—É–∂–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (—Ö–æ—Ç—è —ç—Ç–æ —Å–ª–æ–∂–Ω–æ)
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
from game_data import (
    ALL_ITEMS, BLACKSMITH_ITEMS_COUNT, BLACKSMITH_REFRESH_INTERVAL,
    BLACKSMITH_CRAFT_COST, ITEM_TYPE_FRAGMENT
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–æ–≤ –∏ —ç–º–æ–¥–∑–∏
try:
    from handlers.inventory import format_item_stats
    from handlers.shop import ITEM_TYPE_EMOJI # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–æ–º
    def format_item_stats(stats: dict) -> str: return "–û—à–∏–±–∫–∞: format_item_stats –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    ITEM_TYPE_EMOJI = {"default": '‚ùì'}
    logging.error("Could not import format_item_stats or ITEM_TYPE_EMOJI")


logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")
router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def refresh_blacksmith_if_needed() -> list[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫—É–∑–Ω–µ—Ü–∞."""
    current_time = int(time.time())
    current_legendary_ids, last_refresh = await get_blacksmith_items()

    if current_time - last_refresh >= BLACKSMITH_REFRESH_INTERVAL or not current_legendary_ids:
        logging.info("Refreshing blacksmith items...")
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞–¥–µ–≤–∞–µ–º—ã–µ)
        possible_legendaries = [
            id for id, data in ALL_ITEMS.items()
            if data.get('rarity') == 'legendary' and data.get('equipable')
        ]
        if not possible_legendaries:
             logging.error("No equipable legendary items found for blacksmith.")
             await update_blacksmith_items([]) # –û—á–∏—â–∞–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç, –µ—Å–ª–∏ –ª–µ–≥ –Ω–µ—Ç
             return []

        new_legendary_ids = random.sample(
            possible_legendaries,
            min(len(possible_legendaries), BLACKSMITH_ITEMS_COUNT)
        )
        await update_blacksmith_items(new_legendary_ids)
        logging.info(f"Blacksmith items refreshed: {new_legendary_ids}")
        return new_legendary_ids
    else:
        return current_legendary_ids

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –î–í–£–ú–Ø –∫–Ω–æ–ø–∫–∞–º–∏ (–ò–Ω—Ñ–æ –∏ –°–æ–∑–¥–∞—Ç—å/–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç) ---
def get_blacksmith_keyboard(legendary_ids: list[str], player_fragments_count: dict[str, int]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫—É–∑–Ω–µ—Ü–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ò–Ω—Ñ–æ –∏ –°–æ–∑–¥–∞—Ç—å/–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç."""
    buttons = []
    required_fragments_count = BLACKSMITH_CRAFT_COST # –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ª—é–±—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤

    if not legendary_ids:
        buttons.append([InlineKeyboardButton(text="–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç...", callback_data="smith:noop")])
    else:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–°–ï–• —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —É –∏–≥—Ä–æ–∫–∞
        total_player_fragments = sum(player_fragments_count.values())
        logging.debug(f"Total fragments for keyboard: {total_player_fragments}, Required: {required_fragments_count}")

        for leg_id in legendary_ids:
            leg_data = ALL_ITEMS.get(leg_id)
            if leg_data:
                can_craft = total_player_fragments >= required_fragments_count
                cost_str = f"({required_fragments_count} –õ—é–±—ã—Ö –§—Ä–∞–≥–º.)"
                type_emoji = ITEM_TYPE_EMOJI.get(leg_data.get('type'), ITEM_TYPE_EMOJI['default'])
                item_name_short = hd.quote(leg_data['name'])

                # –ö–Ω–æ–ø–∫–∞ –ò–Ω—Ñ–æ (–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å)
                info_button = InlineKeyboardButton(
                    text=f"‚ÑπÔ∏è {type_emoji}‚ú® {item_name_short} {cost_str}", # –î–æ–±–∞–≤–∏–ª ‚ú® –¥–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–æ–∫
                    callback_data=f"smith:info:{leg_id}"
                )

                # –ö–Ω–æ–ø–∫–∞ –°–æ–∑–¥–∞—Ç—å (–µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)
                if can_craft:
                    action_button = InlineKeyboardButton(
                        text="–°–æ–∑–¥–∞—Ç—å ‚úÖ",
                        callback_data=f"smith:craft:{leg_id}"
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
                    buttons.append([info_button, action_button])
                else:
                    # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –ò–Ω—Ñ–æ
                    buttons.append([info_button])

    buttons.append([InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å (–∑–∞–≤—Ç—Ä–∞)", callback_data="smith:refresh_info")])
    buttons.append([InlineKeyboardButton(text="–£–π—Ç–∏", callback_data="smith:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ ---


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫—É–∑–Ω–µ—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∞–º–∏ ---
def format_blacksmith_message_text(legendary_ids: list[str], player_fragments_count: dict[str, int]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫—É–∑–Ω–µ—Ü–∞, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—ã."""
    fragments_text = "\n".join([f"  - {ALL_ITEMS.get(fid, {}).get('name', fid)}: {count} —à—Ç."
                               for fid, count in player_fragments_count.items()])
    if not fragments_text: fragments_text = "  <i>–£ –≤–∞—Å –Ω–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.</i>"

    blacksmith_text = (
        f"üî® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —É –Ω–∞–∫–æ–≤–∞–ª—å–Ω–∏, –∏–∑–≥–Ω–∞–Ω–Ω–∏–∫!\n"
        f"–Ø –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ–±—è –Ω–µ—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ, –µ—Å–ª–∏ –ø—Ä–∏–Ω–µ—Å–µ—à—å –Ω—É–∂–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã.\n\n"
        f"<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n(–¢—Ä–µ–±—É–µ—Ç—Å—è: {BLACKSMITH_CRAFT_COST} –ª—é–±—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)\n"
    )

    if not legendary_ids:
        blacksmith_text += "\n<i>–ü–æ–∫–∞ –Ω–µ—Ç —á–µ—Ä—Ç–µ–∂–µ–π... –ó–∞–≥–ª—è–Ω–∏ –∑–∞–≤—Ç—Ä–∞.</i>"
    else:
        legendary_ids.sort(key=lambda x: ALL_ITEMS.get(x, {}).get('name', '')) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
        for leg_id in legendary_ids:
            leg_data = ALL_ITEMS.get(leg_id)
            if leg_data:
                stats_str = format_item_stats(leg_data.get('stats', {}))
                type_emoji = ITEM_TYPE_EMOJI.get(leg_data.get('type'), ITEM_TYPE_EMOJI['default'])
                blacksmith_text += f"\n{type_emoji}‚ú® <b>{hd.quote(leg_data['name'])}</b>\n<pre>{stats_str}</pre>\n"

    blacksmith_text += f"\n<b>–í–∞—à–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:</b>\n{fragments_text}\n\n"
    blacksmith_text += "<i>–ù–∞–∂–º–∏—Ç–µ ‚ÑπÔ∏è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ ‚úÖ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.</i>"
    return blacksmith_text
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–ö–°–¢–ê ---

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –∫ –∫—É–∑–Ω–µ—Ü—É ---
@router.message(F.text.lower() == "üî® –∫—É–∑–Ω–µ—Ü")
async def blacksmith_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} visited the blacksmith.")
    try: await check_and_apply_regen(user_id, await state.get_state())
    except Exception as e: logging.error(f"Regen check error in blacksmith: {e}")

    player = await get_player_effective_stats(user_id)
    if not player:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
        return

    legendary_ids = await refresh_blacksmith_if_needed()

    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å—á–∏—Ç–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
    inventory_items = await get_inventory_items(user_id)
    player_fragments_count = {}
    for item in inventory_items:
        item_type = item.get('type')
        if item_type == ITEM_TYPE_FRAGMENT:
             item_id = item.get('item_id')
             if item_id: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –µ—Å—Ç—å
                 player_fragments_count[item_id] = player_fragments_count.get(item_id, 0) + 1

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ç–µ–∫—Å—Ç–∞
    keyboard = get_blacksmith_keyboard(legendary_ids, player_fragments_count)
    blacksmith_text = format_blacksmith_message_text(legendary_ids, player_fragments_count)

    try:
        await message.answer(blacksmith_text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
         if "message is too long" in str(e):
              logging.warning(f"Blacksmith message too long for user {user_id}. Sending short version.")
              fragments_total = sum(player_fragments_count.values())
              await message.answer(f"üî® –ö—É–∑–Ω–µ—Ü.\n–£ –≤–∞—Å {fragments_total} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.\n\n<i>–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–¥–µ—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.</i>", reply_markup=keyboard)
         else:
              logging.error(f"Error sending blacksmith message for user {user_id}: {e}")
              await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–∑–Ω–∏—Ü—ã.", reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –∫—É–∑–Ω–µ—Ü–∞ ---
@router.callback_query(F.data.startswith("smith:"))
async def handle_blacksmith_action(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data_parts = callback.data.split(":") # smith:action:item_id

    if len(data_parts) < 2: # –ú–∏–Ω–∏–º—É–º smith:action
         logging.error(f"Invalid blacksmith callback data (too few parts): {callback.data}")
         await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
         return

    action = data_parts[1]
    logging.info(f"Blacksmith action '{action}' initiated by user {user_id}. CB: {callback.data}")

    if action == "close":
        await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
        try: await callback.message.delete()
        except Exception: pass
        return
    if action == "noop":
        await callback.answer("–ó–∞–≥–ª—è–Ω–∏ –∑–∞–≤—Ç—Ä–∞, –º–æ–∂–µ—Ç, —á—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è.")
        return
    if action == "refresh_info":
        _, last_refresh = await get_blacksmith_items()
        time_left = BLACKSMITH_REFRESH_INTERVAL - (int(time.time()) - last_refresh)
        if time_left > 0:
             hours, rem = divmod(time_left, 3600)
             mins, _ = divmod(rem, 60)
             time_left_str = f"~{int(hours)}—á {int(mins)}–º" if hours > 0 else f"~{int(mins)}–º"
             await callback.answer(f"–ù–æ–≤—ã–µ —á–µ—Ä—Ç–µ–∂–∏ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ {time_left_str}.", show_alert=True)
        else:
             await callback.answer("–ù–æ–≤—ã–µ —á–µ—Ä—Ç–µ–∂–∏ –¥–æ–ª–∂–Ω—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—å—Å—è!", show_alert=True)
        return
    if action == "back": # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∏–∑ –∏–Ω—Ñ–æ
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∫—É–∑–Ω–µ—Ü–∞
        player = await get_player_effective_stats(user_id) # –ù—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏? –ù–µ—Ç.
        legendary_ids_after, _ = await get_blacksmith_items()
        inventory_items_after = await get_inventory_items(user_id)
        player_fragments_count_after = {}
        for item in inventory_items_after:
            if item.get('type') == ITEM_TYPE_FRAGMENT:
                 item_id_frag = item.get('item_id')
                 if item_id_frag:
                     player_fragments_count_after[item_id_frag] = player_fragments_count_after.get(item_id_frag, 0) + 1

        new_keyboard = get_blacksmith_keyboard(legendary_ids_after, player_fragments_count_after)
        new_text = format_blacksmith_message_text(legendary_ids_after, player_fragments_count_after)
        try:
            await callback.message.edit_text(new_text, reply_markup=new_keyboard, parse_mode="HTML")
            await callback.answer()
        except Exception as e:
             logging.error(f"Error going back to blacksmith for user {user_id}: {e}")
             await callback.answer("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫—É–∑–Ω–µ—Ü—É.", show_alert=True)
        return

    # –î–ª—è 'craft' –∏ 'info' –Ω—É–∂–µ–Ω item_id
    try:
        if len(data_parts) < 3: raise ValueError("Missing item_id")
        item_id = data_parts[2]
        item_data = ALL_ITEMS.get(item_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–∫–∞ (–∏–ª–∏ –±—É–¥—É—â–∏–π –∫—Ä–∞—Ñ—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç)
        if not item_data or not item_data.get('equipable') or item_data.get('rarity') != 'legendary':
            raise ValueError("Invalid or non-legendary item ID for blacksmith")
    except (IndexError, ValueError) as e:
        logging.error(f"Invalid blacksmith callback data (item_id): {callback.data} - {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞.", show_alert=True)
        return

    # --- –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ–≥–µ–Ω–¥–∞—Ä–∫–µ (action == "info") ---
    if action == "info":
        if not item_data: return
        stats_str = format_item_stats(item_data.get('stats', {}))
        description = item_data.get('description', '')
        cost_str = f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {BLACKSMITH_CRAFT_COST} –ª—é–±—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"
        type_emoji = ITEM_TYPE_EMOJI.get(item_data.get('type'), ITEM_TYPE_EMOJI['default'])

        info_text = (
            f"{type_emoji}‚ú® <b>{hd.quote(item_data['name'])}</b> (–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π)\n\n"
            f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n<pre>{stats_str}</pre>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{description if description else '-'}</i>\n\n"
            f"{cost_str}"
        )
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –∏ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ ---
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É–∑–Ω–µ—Ü—É", callback_data="smith:back")] # –ò—Å–ø–æ–ª—å–∑—É–µ–º smith:back
        ])
        try:
            await callback.message.edit_text(info_text, reply_markup=back_keyboard, parse_mode="HTML")
            await callback.answer()
        except TelegramBadRequest as e:
             if "message is not modified" in str(e): await callback.answer()
             else:
                 logging.error(f"Error editing message for blacksmith item info {item_id}: {e}")
                 await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", show_alert=True)
        except Exception as e:
             logging.error(f"Unexpected error editing message for blacksmith item info {item_id}: {e}")
             await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)
        return
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    # --- –ö—Ä–∞—Ñ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ (action == "craft") ---
    if action == "craft":
        if not item_data: return
        await callback.answer("–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç...")
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –∫—Ä–∞—Ñ—Ç–∞
        inventory_items = await get_inventory_items(user_id)
        player_fragments = [item for item in inventory_items if item.get('type') == ITEM_TYPE_FRAGMENT]
        total_fragments = len(player_fragments)

        if total_fragments < BLACKSMITH_CRAFT_COST:
             logging.warning(f"User {user_id} attempted craft with insufficient fragments ({total_fragments}/{BLACKSMITH_CRAFT_COST})")
             await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤! –ù—É–∂–Ω–æ {BLACKSMITH_CRAFT_COST}, —É –≤–∞—Å {total_fragments}.", show_alert=True)
             return

        # --- –£–¥–∞–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ ---
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
        fragments_to_remove_inv_ids = [item['inventory_id'] for item in player_fragments[:BLACKSMITH_CRAFT_COST]]
        fragments_removed_count = 0
        logging.info(f"Attempting to remove fragments: {fragments_to_remove_inv_ids} for user {user_id}")
        async with aiosqlite.connect(DB_NAME) as db:
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
             try:
                 async with db.execute("BEGIN"):
                     # –£–¥–∞–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
                     placeholders = ', '.join('?' * len(fragments_to_remove_inv_ids))
                     cursor = await db.execute(f"DELETE FROM inventory WHERE inventory_id IN ({placeholders})", fragments_to_remove_inv_ids)
                     fragments_removed_count = cursor.rowcount

                     if fragments_removed_count != BLACKSMITH_CRAFT_COST:
                          raise ValueError(f"Removed {fragments_removed_count} fragments instead of {BLACKSMITH_CRAFT_COST}")

                     # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥–∞—Ä–∫—É
                     await db.execute(
                         "INSERT INTO inventory (player_id, item_id) VALUES (?, ?)",
                         (user_id, item_id)
                     )
                 # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ, –∫–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                 logging.info(f"Removed {fragments_removed_count} fragments and added legendary '{item_id}' for user {user_id}.")
                 craft_success = True
             except Exception as e:
                 # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
                 # await db.execute("ROLLBACK") # aiosqlite –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ 'async with' —Å –æ—à–∏–±–∫–æ–π
                 logging.error(f"Craft transaction failed for user {user_id}, item {item_id}: {e}", exc_info=True)
                 await callback.answer("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞!", show_alert=True)
                 craft_success = False
                 return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º

        # --- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É–∑–Ω–µ—Ü–∞ –ø–æ—Å–ª–µ –∫—Ä–∞—Ñ—Ç–∞ ---
        if craft_success:
            player_after = await get_player_effective_stats(user_id)
            legendary_ids_after, _ = await get_blacksmith_items()
            inventory_items_after = await get_inventory_items(user_id)
            player_fragments_count_after = {}
            for item in inventory_items_after:
                if item.get('type') == ITEM_TYPE_FRAGMENT:
                     item_id_frag = item.get('item_id')
                     if item_id_frag:
                         player_fragments_count_after[item_id_frag] = player_fragments_count_after.get(item_id_frag, 0) + 1

            new_keyboard = get_blacksmith_keyboard(legendary_ids_after, player_fragments_count_after)
            craft_message = f"‚ú® –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏: <b>{hd.quote(item_data['name'])}</b>!"
            new_blacksmith_text = format_blacksmith_message_text(legendary_ids_after, player_fragments_count_after)
            final_text = f"{craft_message}\n\n{new_blacksmith_text}"

            try:
                await callback.message.edit_text(final_text, reply_markup=new_keyboard, parse_mode="HTML")
            except TelegramBadRequest as e:
                if "message is not modified" in str(e): logging.debug("Blacksmith message not modified after craft.")
                else: logging.warning(f"Could not edit blacksmith message after craft: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                await callback.message.answer(craft_message, parse_mode="HTML")
            except Exception as e:
                 logging.warning(f"Could not edit blacksmith message after craft: {e}")
                 await callback.message.answer(craft_message, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –∫—É–∑–Ω–µ—Ü–∞ –í–ù–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–¥–µ—Å—å –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM)
# @router.callback_query(F.data.startswith("smith:"))
# async def handle_blacksmith_action_outside_state(callback: types.CallbackQuery):
#     # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∫—É–∑–Ω–µ—Ü –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FSM
#     pass
