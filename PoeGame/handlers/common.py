# handlers/common.py
import logging
import time
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton # –ù—É–∂–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext # –ù—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
from game_data import BASE_STATS
from database.db_manager import add_player, get_player, check_and_apply_regen

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ bot.py)
# logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
# –í—ã–Ω–µ—Å–µ–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def trigger_regen_check(user_id: int, state: FSMContext):
     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –±–æ—é."""
     try:
        current_state_str = await state.get_state()
        await check_and_apply_regen(user_id, current_state_str)
     except Exception as e:
         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
         logging.error(f"Error during regen check for user {user_id}: {e}", exc_info=False) # exc_info=False, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥ —Ç—Ä–µ–π—Å–±–µ–∫–æ–º —Ä–µ–≥–µ–Ω–∞


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ú–µ–Ω—é ---
def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    buttons = [
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")], # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥
        [KeyboardButton(text="üó∫Ô∏è –ó–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="üí™ –ü—Ä–æ–∫–∞—á–∫–∞")],
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥
        [KeyboardButton(text="‚öîÔ∏è –ë–æ–π"), KeyboardButton(text="üèòÔ∏è –ì–æ—Ä–æ–¥")],
        # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥
        [KeyboardButton(text="üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"), KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥")],
    ]
    # resize_keyboard=True - –ø–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
    # one_time_keyboard=False - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –±—É–¥–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False # –î–µ–ª–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π
    )
    return keyboard

def get_fight_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥–º–µ–Ω—é '–ë–æ–π'."""
    buttons = [
        [KeyboardButton(text="‚öîÔ∏è –ë–æ–π —Å –º–æ–Ω—Å—Ç—Ä–æ–º"), KeyboardButton(text="üíÄ –ë–æ–π —Å –±–æ—Å—Å–æ–º")],
        [KeyboardButton(text="ü§∫ –ë–æ–π —Å –∏–≥—Ä–æ–∫–æ–º (—Å–∫–æ—Ä–æ)")],
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_city_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥–º–µ–Ω—é '–ì–æ—Ä–æ–¥'."""
    buttons = [
        # –£–±–∏—Ä–∞–µ–º (—Å–∫–æ—Ä–æ)
        [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω –æ—Ä—É–∂–∏—è"), KeyboardButton(text="üõ°Ô∏è –ú–∞–≥–∞–∑–∏–Ω –±—Ä–æ–Ω–∏")],
        [KeyboardButton(text="‚öïÔ∏è –õ–µ–∫–∞—Ä—å"), KeyboardButton(text="üé≤ –ì–µ–º–±–ª–µ—Ä")],
        [KeyboardButton(text="üî® –ö—É–∑–Ω–µ—Ü")],
        [KeyboardButton(text="üîÆ –®–∫–æ–ª–∞ –ú–∞–≥–æ–≤")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons, resize_keyboard=True, one_time_keyboard=False
    )
    return keyboard


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ –∏ –ö–Ω–æ–ø–æ–∫ ---

@router.message(CommandStart())
async def handle_start(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –í—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    logging.info(f"User {user_id} ({username}) initiated /start.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–µ–Ω –î–û –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
    await trigger_regen_check(user_id, state)
    player = await get_player(user_id) # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

    if player:
        logging.info(f"Existing player {user_id} found. Sending main menu.")
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –†—ç–∫–ª–∞—Å—Ç, {username}! üëã",
            reply_markup=get_main_menu_keyboard() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    else:
        logging.info(f"New player {user_id}. Proceeding with character creation.")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'Scion'
        chosen_class = 'Scion'
        # –ë–µ—Ä–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–∑ BASE_STATS
        class_display_name = BASE_STATS.get(chosen_class, {}).get('name', chosen_class)

        success = await add_player(user_id, username, chosen_class)
        if success:
            logging.info(f"Character created successfully for {user_id} as {chosen_class}.")
            await message.answer(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†—ç–∫–ª–∞—Å—Ç, –ò–∑–≥–Ω–∞–Ω–Ω–∏–∫ {username}! ‚ú®\n"
                f"–¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å –∫–∞–∫ {class_display_name}.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∏—Ä—É –∏–≥—Ä—ã.",
                reply_markup=get_main_menu_keyboard() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        else:
            logging.error(f"Failed to create character for {user_id} (DB error or already exists).")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. üò•\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –∏–≥—Ä—É, –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏. –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ."
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@router.message(F.text.lower() == "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def handle_back_to_main_menu(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', –≤–æ–∑–≤—Ä–∞—â–∞—è –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    logging.debug(f"User {message.from_user.id} pressed 'Back to menu'.")
    await trigger_regen_check(message.from_user.id, state) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–µ–Ω –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –ø–æ–¥–º–µ–Ω—é
@router.message(F.text.lower() == "‚öîÔ∏è –±–æ–π")
async def handle_fight_menu(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ë–æ–π', –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–æ–¥–º–µ–Ω—é –±–æ—è."""
    logging.debug(f"User {message.from_user.id} pressed 'Fight' button.")
    await trigger_regen_check(message.from_user.id, state) # –†–µ–≥–µ–Ω –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –º–µ–Ω—é –±–æ—è
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—è:", reply_markup=get_fight_menu_keyboard())

@router.message(F.text.lower() == "üèòÔ∏è –≥–æ—Ä–æ–¥")
async def handle_city_menu(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ä–æ–¥', –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–æ–¥–º–µ–Ω—é –≥–æ—Ä–æ–¥–∞."""
    logging.debug(f"User {message.from_user.id} pressed 'City' button.")
    await trigger_regen_check(message.from_user.id, state) # –†–µ–≥–µ–Ω –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –≥–æ—Ä–æ–¥
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–æ—Ä–æ–¥! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=get_city_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º "(—Å–∫–æ—Ä–æ)"
@router.message(F.text.lower().contains("(—Å–∫–æ—Ä–æ)"))
async def handle_coming_soon(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '(—Å–∫–æ—Ä–æ)'."""
    logging.debug(f"User {message.from_user.id} clicked a 'coming soon' button: {message.text}")
    await trigger_regen_check(message.from_user.id, state) # –†–µ–≥–µ–Ω –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    await message.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üöß –°–∫–æ—Ä–æ –∑–¥–µ—Å—å —á—Ç–æ-—Ç–æ –ø–æ—è–≤–∏—Ç—Å—è.")

# –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /menu –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(Command("menu"))
async def handle_menu_command(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    logging.debug(f"User {message.from_user.id} used /menu command.")
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–µ–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
    await trigger_regen_check(user_id, state)
    player = await get_player(user_id) # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    if player:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def handle_help_command(message: Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help, –≤—ã–≤–æ–¥—è –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
     logging.debug(f"User {message.from_user.id} used /help command.")
     await trigger_regen_check(message.from_user.id, state) # –†–µ–≥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–º–æ—â–∏
     await message.answer(
         "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–æ–ï-–ë–æ—Ç!</b>\n\n"
         "–≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞ –ø–æ –º–æ—Ç–∏–≤–∞–º Path of Exile –ø—Ä—è–º–æ –≤ Telegram.\n\n"
         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞</b> –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–π:\n"
         "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> –í–∞—à–∏ —Å—Ç–∞—Ç—ã, —É—Ä–æ–≤–µ–Ω—å, –∫–≤–µ—Å—Ç—ã.\n"
         "üéí <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b> –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.\n" # –î–æ–±–∞–≤–∏–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
         "üó∫Ô∏è <b>–ó–∞–¥–∞–Ω–∏—è:</b> –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç.\n"
         "üí™ <b>–ü—Ä–æ–∫–∞—á–∫–∞:</b> –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—á–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.\n"
         "‚öîÔ∏è <b>–ë–æ–π:</b> –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏.\n"
         "üèòÔ∏è <b>–ì–æ—Ä–æ–¥:</b> –ü–æ—Å–µ—Ç–∏—Ç—å –õ–µ–∫–∞—Ä—è –∏ –±—É–¥—É—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã.\n"
         "üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞:</b> –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å —Ä–∞–∑ –≤ –¥–µ–Ω—å.\n"
         "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥:</b> –¢–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n\n"
         "–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –∏—Å—á–µ–∑–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.\n"
         "–£–¥–∞—á–∏ –≤ –†—ç–∫–ª–∞—Å—Ç–µ, –∏–∑–≥–Ω–∞–Ω–Ω–∏–∫!",
         parse_mode="HTML" # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
# –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
# –í–∞–∂–Ω–æ: —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú —Å—Ä–µ–¥–∏ message-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤,
# —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ F.text
# @router.message()
# async def handle_unknown_text(message: Message, state: FSMContext):
#     logging.debug(f"Received unhandled text from {message.from_user.id}: {message.text}")
#     await trigger_regen_check(message.from_user.id, state)
#     await message.reply("–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É ü§î\n"
#                         "–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help.")
