# handlers/ranking.py
import logging
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd

from database.db_manager import get_top_players, check_and_apply_regen

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")
router = Router()

RANKING_LIMIT = 10 # –°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç–æ–ø–µ

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
def get_ranking_type_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üèÜ –ü–æ –£—Ä–æ–≤–Ω—é/–û–ø—ã—Ç—É", callback_data="rank:level_xp")],
        [InlineKeyboardButton(text="üí∞ –ü–æ –ó–æ–ª–æ—Ç—É", callback_data="rank:gold")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="rank:close")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã –†–µ–π—Ç–∏–Ω–≥
@router.message(F.text.lower() == "üèÜ —Ä–µ–π—Ç–∏–Ω–≥")
# @router.message(Command("ranking")) # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –∫–æ–º–∞–Ω–¥—É
async def show_ranking_options(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} requested ranking.")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–µ–Ω
    try:
        current_state_str = await state.get_state()
        await check_and_apply_regen(user_id, current_state_str)
    except Exception as e:
        logging.error(f"Error during regen check in ranking for user {user_id}: {e}", exc_info=False)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞:", reply_markup=get_ranking_type_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
@router.callback_query(F.data.startswith("rank:"))
async def process_ranking_selection(callback: types.CallbackQuery):
    action = callback.data.split(":")[1]
    user_id = callback.from_user.id

    if action == "close":
        await callback.answer("–†–µ–π—Ç–∏–Ω–≥ –∑–∞–∫—Ä—ã—Ç.")
        try: await callback.message.delete()
        except Exception: pass
        return

    if action not in ['level_xp', 'gold']:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞.", show_alert=True)
        return

    await callback.answer(f"–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø –ø–æ {'–æ–ø—ã—Ç—É' if action == 'level_xp' else '–∑–æ–ª–æ—Ç—É'}...")

    try:
        top_players = await get_top_players(by=action, limit=RANKING_LIMIT)

        if not top_players:
            text = "–í —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ..."
        else:
            if action == 'level_xp':
                text = f"üèÜ <b>–¢–æ–ø-{RANKING_LIMIT} –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –£—Ä–æ–≤–Ω—é/–û–ø—ã—Ç—É:</b>\n\n"
                for i, player in enumerate(top_players):
                    text += f"{i+1}. {hd.quote(player['username'])} - –£—Ä. {player['level']} ({player['xp']} XP)\n"
            else: # action == 'gold'
                text = f"üí∞ <b>–¢–æ–ø-{RANKING_LIMIT} –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ó–æ–ª–æ—Ç—É:</b>\n\n"
                for i, player in enumerate(top_players):
                    text += f"{i+1}. {hd.quote(player['username'])} - {player['gold']} üí∞\n"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞
        await callback.message.edit_text(text, reply_markup=get_ranking_type_keyboard(), parse_mode="HTML")

    except Exception as e:
        logging.error(f"Error fetching or displaying ranking for action '{action}': {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞.", show_alert=True)
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫ –≤—ã–±–æ—Ä—É –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—å
        try: await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.", reply_markup=get_ranking_type_keyboard())
        except Exception: pass
