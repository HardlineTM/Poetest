# handlers/magic_school.py
import logging
import math # –î–æ–±–∞–≤–∏–º math –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd
from aiogram.exceptions import TelegramBadRequest

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ
from database.db_manager import (
    get_player_effective_stats, check_and_apply_regen,
    get_learned_spells, learn_spell
)
from game_data import SPELLS

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")
router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ ---
def get_spell_intelligence_requirement(level_req: int) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
    # –§–æ—Ä–º—É–ª–∞: 20 + (—É—Ä–æ–≤–µ–Ω—å_—Å–ø–µ–ª–ª–∞ - 1) * 5
    # –ù–∞–ø—Ä–∏–º–µ—Ä: –£—Ä.1 -> 20, –£—Ä.2 -> 25, –£—Ä.3 -> 30, ...
    if level_req <= 0: return 0 # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return 20 + (level_req - 1) * 5

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –®–∫–æ–ª—ã –ú–∞–≥–æ–≤ (–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è) ---
def get_magic_school_keyboard(player_level: int, player_intelligence: int, learned_spell_ids: list[str]) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.
    –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.
    """
    buttons = []
    available_to_learn_display = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ–ª–ª–æ–≤

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–µ–ª–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≤—ã—É—á–∏–ª
    for spell_id, spell_data in SPELLS.items():
        if spell_id not in learned_spell_ids:
            available_to_learn_display.append({'id': spell_id, **spell_data})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    available_to_learn_display.sort(key=lambda s: s.get('level_req', 999))

    if not available_to_learn_display:
        buttons.append([InlineKeyboardButton(text="–í—ã —É–∂–µ –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!", callback_data="magic:noop")])
    else:
        for spell in available_to_learn_display:
            spell_id = spell['id']
            level_req = spell.get('level_req', 999)
            # --- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ ---
            int_req = get_spell_intelligence_requirement(level_req)

            # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —É—Å–ª–æ–≤–∏—è ---
            level_ok = player_level >= level_req
            int_ok = player_intelligence >= int_req
            can_learn = level_ok and int_ok

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            mana_cost = spell.get('mana_cost', '?')
            req_text_parts = []
            if not level_ok:
                req_text_parts.append(f"üîí–£—Ä.{level_req}")
            else:
                req_text_parts.append(f"–£—Ä.{level_req}")

            if not int_ok:
                req_text_parts.append(f"üîí–ò–Ω—Ç.{int_req}")
            else:
                req_text_parts.append(f"–ò–Ω—Ç.{int_req}")

            req_text = " / ".join(req_text_parts) # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: "–£—Ä.5 / üîí–ò–Ω—Ç.40"

            button_prefix = "‚úÖ" if can_learn else "‚ùå" # –≠–º–æ–¥–∑–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            button_text = (
                f"{button_prefix} {hd.quote(spell['name'])} "
                f"({req_text}, {mana_cost} –ú–∞–Ω—ã)"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback_data
            if can_learn:
                callback_data = f"magic:learn:{spell_id}"
            else:
                # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –≤—ã—É—á–∏—Ç—å, –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ (–∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å)
                callback_data = f"magic:info:{spell_id}" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–µ–ª–ª

            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    buttons.append([InlineKeyboardButton(text="–£–π—Ç–∏", callback_data="magic:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–®–∫–æ–ª–∞ –º–∞–≥–æ–≤"
@router.message(F.text.lower() == "üîÆ —à–∫–æ–ª–∞ –º–∞–≥–æ–≤")
async def magic_school_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} entered the Magic School.")
    try: await check_and_apply_regen(user_id, await state.get_state())
    except Exception as e: logging.error(f"Regen check error in magic school: {e}")

    player = await get_player_effective_stats(user_id) # –ù—É–∂–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∏ –ò–ù–¢–ï–õ–õ–ï–ö–¢
    if not player:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
        return

    learned_spells = await get_learned_spells(user_id)
    learned_spell_ids = [s['id'] for s in learned_spells]

    # --- –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    keyboard = get_magic_school_keyboard(player['level'], player['intelligence'], learned_spell_ids)

    learned_spells_text = "\n".join(
        [f" - {hd.quote(s['name'])} ({s['mana_cost']} –ú–∞–Ω—ã): <i>{s.get('description','–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</i>" for s in learned_spells]
    )
    if not learned_spells_text: learned_spells_text = "<i>–í—ã –µ—â–µ –Ω–µ –∏–∑—É—á–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.</i>"

    message_text = (
        f"üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®–∫–æ–ª—É –ú–∞–≥–æ–≤, {hd.quote(player['username'])}!\n"
        f"–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—à—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ —É—Ä–æ–≤–Ω—é –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É.\n"
        f"(–í–∞—à –£—Ä.: {player['level']}, –í–∞—à –ò–Ω—Ç.: {player['intelligence']})\n\n" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        f"<b>–ò–∑—É—á–µ–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è:</b>\n{learned_spells_text}\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b> (‚úÖ - –º–æ–∂–Ω–æ –∏–∑—É—á–∏—Ç—å, ‚ùå - –Ω–µ–ª—å–∑—è)"
    )

    try:
        await message.answer(message_text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
         if "message is too long" in str(e):
              logging.warning(f"Magic school message too long for user {user_id}.")
              await message.answer("üîÆ –®–∫–æ–ª–∞ –ú–∞–≥–æ–≤.\n<i>–°–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.</i>", reply_markup=keyboard)
         else:
              logging.error(f"Error sending magic school message for user {user_id}: {e}")
              await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∫–æ–ª—ã –º–∞–≥–æ–≤.", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –®–∫–æ–ª–µ –ú–∞–≥–æ–≤
@router.callback_query(F.data.startswith("magic:"))
async def handle_magic_school_action(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data_parts = callback.data.split(":") # magic:action:spell_id

    action = data_parts[1]

    if action == "close":
        await callback.answer("–ó–Ω–∞–Ω–∏–µ - —Å–∏–ª–∞!")
        try: await callback.message.delete()
        except Exception: pass
        return
    if action == "noop":
        await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–µ—à—å —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ–ª–ª–∞ –¥–ª—è info –∏–ª–∏ learn
    try:
        spell_id = data_parts[2]
        spell_data = SPELLS.get(spell_id)
        if not spell_data: raise ValueError("Spell not found in SPELLS")
    except (IndexError, ValueError) as e:
        logging.error(f"Invalid magic school callback data: {callback.data} - {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.", show_alert=True)
        return

    # --- –ü–æ–∫–∞–∑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–ø–µ–ª–ª–µ ---
    if action == "info":
        level_req = spell_data.get('level_req', '?')
        int_req = get_spell_intelligence_requirement(level_req if isinstance(level_req, int) else 999)
        description = spell_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.')
        mana_cost = spell_data.get('mana_cost', '?')

        info_text = (
            f"üìú <b>{hd.quote(spell_data['name'])}</b>\n"
            f"{description}\n\n"
            f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: <b>–£—Ä. {level_req}</b>, <b>–ò–Ω—Ç. {int_req}</b>\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {mana_cost} –ú–∞–Ω—ã"
        )
        await callback.answer(info_text, show_alert=True, parse_mode="HTML")
        return

    # --- –ò–∑—É—á–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è ---
    if action == "learn":
        await callback.answer(f"–ò–∑—É—á–∞–µ–º '{spell_data['name']}'...")

        # –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∏–∑—É—á–µ–Ω–∏–µ–º
        player = await get_player_effective_stats(user_id)
        level_req = spell_data.get('level_req', 999)
        int_req = get_spell_intelligence_requirement(level_req)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ò –ò–ù–¢–ï–õ–õ–ï–ö–¢
        if not player:
             await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞.", show_alert=True)
             return
        if player['level'] < level_req:
             await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å! –¢—Ä–µ–±—É–µ—Ç—Å—è {level_req}.", show_alert=True)
             return
        if player['intelligence'] < int_req:
             await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞! –¢—Ä–µ–±—É–µ—Ç—Å—è {int_req}.", show_alert=True)
             return

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑—É—á–∏—Ç—å
        learned_success = await learn_spell(user_id, spell_id)

        if learned_success:
             logging.info(f"User {user_id} successfully learned spell '{spell_id}'.")
             await callback.answer(f"–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ '{spell_data['name']}' –∏–∑—É—á–µ–Ω–æ!", show_alert=False)
             # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –®–∫–æ–ª—ã –ú–∞–≥–æ–≤
             learned_spells_after = await get_learned_spells(user_id)
             learned_spell_ids_after = [s['id'] for s in learned_spells_after]
             # –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
             keyboard_after = get_magic_school_keyboard(player['level'], player['intelligence'], learned_spell_ids_after)
             # TODO: –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å)
             learned_spells_text_after = "\n".join(
                 [f" - {hd.quote(s['name'])} ({s['mana_cost']} –ú–∞–Ω—ã): <i>{s.get('description','-')}</i>" for s in learned_spells_after]
             ) or "<i>–ù–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.</i>"
             message_text_after = (
                 f"üîÆ –®–∫–æ–ª–∞ –ú–∞–≥–æ–≤\n(–£—Ä.: {player['level']}, –ò–Ω—Ç.: {player['intelligence']})\n\n"
                 f"<b>–ò–∑—É—á–µ–Ω–Ω—ã–µ:</b>\n{learned_spells_text_after}\n\n"
                 f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:</b> (‚úÖ/‚ùå)"
             )
             try:
                 await callback.message.edit_text(message_text_after, reply_markup=keyboard_after, parse_mode="HTML")
             except Exception as e:
                  logging.warning(f"Could not edit magic school message after learning: {e}")
        else:
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑—É—á–µ–Ω–æ –ª–∏ —É–∂–µ (learn_spell –≤–µ—Ä–Ω–µ—Ç False –∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –∏ –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ)
             learned_spells_check = await get_learned_spells(user_id)
             if spell_id in [s['id'] for s in learned_spells_check]:
                 await callback.answer("–≠—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —É–∂–µ –∏–∑—É—á–µ–Ω–æ.", show_alert=True)
             else:
                 await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ (–æ—à–∏–±–∫–∞).", show_alert=True)
