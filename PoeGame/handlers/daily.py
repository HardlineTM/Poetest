# handlers/daily.py
import time
import math
import random
import logging
from aiogram import Router, F, types
from aiogram.filters import Command # –û—Å—Ç–∞–≤–ª—è–µ–º Command, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
from aiogram.fsm.context import FSMContext # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSMContext
from datetime import datetime, timedelta # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
from aiogram.utils.text_decorations import html_decoration as hd # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω –º–æ–Ω—Å—Ç—Ä–æ–≤

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ db_manager
from database.db_manager import (
    get_player, set_daily_reward_time, assign_daily_quest, clear_daily_quest,
    update_player_xp, check_and_apply_regen # –î–æ–±–∞–≤–ª—è–µ–º check_and_apply_regen
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤
from game_data import MONSTERS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫—É–ª–¥–∞—É–Ω–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥
DAILY_REWARD_COOLDOWN = 24 * 60 * 60 # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
DAILY_QUEST_COOLDOWN = 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
DAILY_REWARD_GOLD = 50 # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞

async def trigger_regen_check(user_id: int, state: FSMContext):
     """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
     current_state_str = await state.get_state()
     await check_and_apply_regen(user_id, current_state_str)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"
@router.message(F.text.lower() == "üéÅ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞")
async def handle_daily_reward(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    user_id = message.from_user.id
    logging.debug(f"User {user_id} requested daily reward.")

    # --- –í—ã–∑–æ–≤ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
    await trigger_regen_check(user_id, state)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ü–û–°–õ–ï —Ä–µ–≥–µ–Ω–∞
    player = await get_player(user_id)

    if not player:
        logging.warning(f"Non-player {user_id} tried to get daily reward.")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
        return

    current_time = int(time.time())
    last_reward_time = player['last_daily_reward_time']
    time_passed = current_time - last_reward_time

    if time_passed >= DAILY_REWARD_COOLDOWN:
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É (—Ç–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç–æ)
        _, _ = await update_player_xp(user_id, gained_gold=DAILY_REWARD_GOLD) # –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç None, False
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥—ã
        await set_daily_reward_time(user_id)
        await message.answer(f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É: {DAILY_REWARD_GOLD} –∑–æ–ª–æ—Ç–∞!")
        logging.info(f"Player {user_id} claimed daily reward ({DAILY_REWARD_GOLD} gold).")
    else:
        time_left = DAILY_REWARD_COOLDOWN - time_passed
        hours, remainder = divmod(time_left, 3600)
        minutes, seconds = divmod(remainder, 60)
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
        time_left_str = ""
        if hours > 0:
            time_left_str += f"{int(hours)} —á "
        if minutes > 0:
            time_left_str += f"{int(minutes)} –º–∏–Ω "
        # –î–æ–±–∞–≤–∏–º —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
        if hours == 0 and minutes < 5:
            time_left_str += f"{int(seconds)} —Å–µ–∫"

        await message.answer(
            f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è.\n"
            f"–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑: {time_left_str.strip()}."
        )
        logging.debug(f"User {user_id} daily reward is on cooldown. Time left: {time_left}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
@router.message(F.text.lower() == "üó∫Ô∏è –∑–∞–¥–∞–Ω–∏—è")
async def handle_daily_quest_menu(message: types.Message, state: FSMContext): # –î–æ–±–∞–≤–ª—è–µ–º state
    user_id = message.from_user.id
    logging.debug(f"User {user_id} requested daily quests menu.")

    # --- –í—ã–∑–æ–≤ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
    await trigger_regen_check(user_id, state)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ü–û–°–õ–ï —Ä–µ–≥–µ–Ω–∞
    player = await get_player(user_id)

    if not player:
        logging.warning(f"Non-player {user_id} tried to access quests.")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–µ—Å—Ç –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∑—è—Ç—å –Ω–æ–≤—ã–π
    if player['quest_monster_key']:
         # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –º–æ–Ω—Å—Ç—Ä–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
         quest_monster_key_escaped = hd.quote(player['quest_monster_key'])
         await message.answer(
             f"üìú <b>–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n"
             f"   –¶–µ–ª—å: –£–±–∏—Ç—å {quest_monster_key_escaped} ({player['quest_current_count']}/{player['quest_target_count']})\n"
             f"   –ù–∞–≥—Ä–∞–¥–∞: {player['quest_gold_reward']} –∑–æ–ª–æ—Ç–∞, {player['quest_xp_reward']} XP\n\n"
             f"<i>–£–±–∏–≤–∞–π—Ç–µ –Ω—É–∂–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –±–æ—é (–∫–Ω–æ–ø–∫–∞ '‚öîÔ∏è –ë–æ–π —Å –º–æ–Ω—Å—Ç—Ä–æ–º'), —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.</i>",
             parse_mode="HTML"
         )
         logging.debug(f"User {user_id} viewed active quest: Kill {player['quest_target_count']} {player['quest_monster_key']}")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ –≤–∑—è—Ç–∏–µ –∫–≤–µ—Å—Ç–∞
        current_time = int(time.time())
        last_quest_time = player['last_quest_time']
        time_passed = current_time - last_quest_time

        if last_quest_time == 0 or time_passed >= DAILY_QUEST_COOLDOWN:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
            possible_monsters = list(MONSTERS.keys())
            if not possible_monsters:
                 logging.error("Cannot generate quest: MONSTERS list is empty in game_data.py")
                 await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç (–æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω—Å—Ç—Ä–æ–≤).")
                 return

            target_monster = random.choice(possible_monsters)
            target_count = random.randint(3, 10) # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω—Å—Ç—Ä–æ–≤
            monster_data = MONSTERS.get(target_monster)
            if not monster_data:
                 logging.error(f"Cannot generate quest: Monster data for '{target_monster}' not found.")
                 await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–µ—Å—Ç (–æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–∞).")
                 return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É (–ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –º–æ–Ω—Å—Ç—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
            # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–≥—Ä–∞–¥—ã
            reward_multiplier = 1.2
            gold_reward = math.ceil(target_count * (monster_data['xp_reward'] // 2 + 2) * reward_multiplier)
            xp_reward = math.ceil(target_count * monster_data['xp_reward'] * reward_multiplier + 10)

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–≤–µ—Å—Ç
            await assign_daily_quest(user_id, target_monster, target_count, gold_reward, xp_reward)

            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞
            target_monster_escaped = hd.quote(target_monster)
            await message.answer(
                f"üìú <b>–ù–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n"
                f"   –¶–µ–ª—å: –£–±–∏—Ç—å {target_monster_escaped} ({target_count} —à—Ç.)\n"
                f"   –ù–∞–≥—Ä–∞–¥–∞: {gold_reward} –∑–æ–ª–æ—Ç–∞, {xp_reward} XP\n\n"
                f"<i>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –Ω–∞ –æ—Ö–æ—Ç—É! (–∫–Ω–æ–ø–∫–∞ '‚öîÔ∏è –ë–æ–π —Å –º–æ–Ω—Å—Ç—Ä–æ–º')</i>",
                parse_mode="HTML"
            )
            logging.info(f"User {user_id} received new quest: Kill {target_count} {target_monster}.")

        else:
            # –ö–≤–µ—Å—Ç –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ
            time_left = DAILY_QUEST_COOLDOWN - time_passed
            hours, remainder = divmod(time_left, 3600)
            minutes, seconds = divmod(remainder, 60)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            time_left_str = ""
            if hours > 0: time_left_str += f"{int(hours)} —á "
            if minutes > 0: time_left_str += f"{int(minutes)} –º–∏–Ω "
            if hours == 0 and minutes < 5: time_left_str += f"{int(seconds)} —Å–µ–∫"

            await message.answer(
                f"–í—ã —É–∂–µ –±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.\n"
                f"–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: {time_left_str.strip()}."
            )
            logging.debug(f"User {user_id} quest generation is on cooldown. Time left: {time_left}")
