# handlers/shop.py
import logging
import time
import random
import math
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd
from aiogram.exceptions import TelegramBadRequest # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API

from database.db_manager import (
    get_shop_items, update_shop_items, get_player_effective_stats,
    add_item_to_inventory, update_player_xp, check_and_apply_regen
)
from game_data import (
    ALL_ITEMS, SHOP_REFRESH_INTERVAL, SHOP_WEAPON_ITEMS, SHOP_ARMOR_ITEMS,
    SHOP_LEGENDARY_CHANCE, ITEM_TYPE_WEAPON, ITEM_TYPE_HELMET, ITEM_TYPE_CHEST,
    ITEM_TYPE_GLOVES, ITEM_TYPE_BOOTS, ITEM_TYPE_FRAGMENT, ITEM_TYPE_RING, # –î–æ–±–∞–≤–∏–ª Fragment/Ring
    ITEM_TYPE_AMULET, ITEM_TYPE_BELT, # –î–æ–±–∞–≤–∏–ª Amulet/Belt
    get_random_legendary_item_id
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–æ–≤
try:
    from handlers.inventory import format_item_stats
except ImportError:
    def format_item_stats(stats: dict) -> str: return "–û—à–∏–±–∫–∞: format_item_stats –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    logging.error("Could not import format_item_stats from handlers.inventory in shop.py")

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")
router = Router()

# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
ITEM_TYPE_EMOJI = {
    "helmet": "üéì", "chest": "üëï", "gloves": "üß§", "boots": "üë¢", "weapon": "‚öîÔ∏è",
    "ring": "üíç", "amulet": "üìø", "belt": "üéóÔ∏è",
    "fragment": "üíé",
    "legendary_helmet": "üëë", "legendary_chest": "‚öúÔ∏è", "legendary_gloves": "‚ú®",
    "legendary_boots": "üöÄ", "legendary_ring": "üíé", "legendary_amulet": "üßø",
    "legendary_belt": "üîó", "legendary_weapon": "üî•",
    "default": '‚ùì'
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def refresh_shop_if_needed(shop_type: str) -> list[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    current_time = int(time.time())
    current_item_ids, last_refresh = await get_shop_items(shop_type)

    if current_time - last_refresh >= SHOP_REFRESH_INTERVAL or not current_item_ids:
        logging.info(f"Refreshing shop '{shop_type}'...")
        new_item_ids = []
        item_count = 0
        allowed_types = []
        legendary_added = False

        if shop_type == 'weapon_shop':
            item_count = SHOP_WEAPON_ITEMS
            allowed_types = [ITEM_TYPE_WEAPON]
            if random.random() < SHOP_LEGENDARY_CHANCE:
                 leg_id = get_random_legendary_item_id()
                 if leg_id and ALL_ITEMS.get(leg_id):
                     item_data = ALL_ITEMS[leg_id]
                     # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ—Ä—É–∂–∏–µ (–∏–ª–∏ –º–æ–∂–Ω–æ –ª—é–±—É—é –ª–µ–≥—É?)
                     if item_data.get('equipable') and item_data.get('type', '').endswith(ITEM_TYPE_WEAPON):
                         new_item_ids.append(leg_id)
                         legendary_added = True
                         logging.info(f"Legendary weapon '{leg_id}' added to weapon shop!")

        elif shop_type == 'armor_shop':
            item_count = SHOP_ARMOR_ITEMS
            allowed_types = [ITEM_TYPE_HELMET, ITEM_TYPE_CHEST, ITEM_TYPE_GLOVES, ITEM_TYPE_BOOTS]
            if random.random() < SHOP_LEGENDARY_CHANCE:
                 leg_id = get_random_legendary_item_id()
                 if leg_id and ALL_ITEMS.get(leg_id):
                      item_data = ALL_ITEMS[leg_id]
                      # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—Ä–æ–Ω—è
                      if item_data.get('equipable') and item_data.get('type', '') in [f'legendary_{t}' for t in allowed_types]:
                          new_item_ids.append(leg_id)
                          legendary_added = True
                          logging.info(f"Legendary armor '{leg_id}' added to armor shop!")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
        possible_items = [
            item_id for item_id, data in ALL_ITEMS.items()
            if data.get('type') in allowed_types and data.get('rarity') != 'legendary' and data.get('rarity') != 'quest'
        ]

        items_needed = item_count - len(new_item_ids)
        if possible_items and items_needed > 0:
             chosen_items = random.sample(possible_items, min(len(possible_items), items_needed))
             new_item_ids.extend(chosen_items)
        elif items_needed > 0:
             logging.warning(f"Not enough non-legendary items of types {allowed_types} to fill the shop '{shop_type}'.")

        await update_shop_items(shop_type, new_item_ids)
        return new_item_ids
    else:
        return current_item_ids

def get_shop_action_keyboard(shop_type: str, item_ids: list[str], player_gold: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ò–Ω—Ñ–æ –∏ –ö—É–ø–∏—Ç—å/–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç."""
    buttons = []
    if not item_ids:
        buttons.append([InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç", callback_data="shop:noop")])
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–∫–∏, –ø–æ—Ç–æ–º –ø–æ —Ü–µ–Ω–µ
        item_ids.sort(key=lambda x: (ALL_ITEMS.get(x, {}).get('rarity', '') != 'legendary', ALL_ITEMS.get(x, {}).get('cost', 99999)))

        for item_id in item_ids:
            item_data = ALL_ITEMS.get(item_id)
            if item_data:
                price = item_data.get('cost', 99999)
                can_afford = player_gold >= price
                type_emoji = ITEM_TYPE_EMOJI.get(item_data.get('type'), ITEM_TYPE_EMOJI['default'])
                item_name_short = hd.quote(item_data['name'])
                rarity_marker = "‚ú®" if item_data.get('rarity') == 'legendary' else ""

                # –ö–Ω–æ–ø–∫–∞ –ò–Ω—Ñ–æ
                info_button = InlineKeyboardButton(
                    text=f"‚ÑπÔ∏è {type_emoji}{rarity_marker} {item_name_short} ({price}üí∞)",
                    callback_data=f"shop:{shop_type}:info:{item_id}"
                )

                # –ö–Ω–æ–ø–∫–∞ –ö—É–ø–∏—Ç—å (–µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥)
                if can_afford:
                    action_button = InlineKeyboardButton(
                        text="–ö—É–ø–∏—Ç—å ‚úÖ",
                        callback_data=f"shop:{shop_type}:buy:{item_id}:{price}"
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
                    buttons.append([info_button, action_button])
                else:
                    # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥, —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –ò–Ω—Ñ–æ
                    buttons.append([info_button])

    buttons.append([InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å (–∑–∞–≤—Ç—Ä–∞)", callback_data=f"shop:{shop_type}:refresh_info")])
    buttons.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"shop:{shop_type}:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def format_shop_message_text(shop_title: str, item_ids: list[str], player_gold: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞, –≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—ã."""
    shop_text = f"{shop_title} (–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {player_gold}üí∞\n\n"
    if not item_ids:
        shop_text += "<i>–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!</i>"
    else:
        shop_text += "<b>–¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        item_ids.sort(key=lambda x: (ALL_ITEMS.get(x, {}).get('rarity', '') != 'legendary', ALL_ITEMS.get(x, {}).get('cost', 99999)))

        for item_id in item_ids:
            item_data = ALL_ITEMS.get(item_id)
            if item_data:
                price = item_data.get('cost', '??')
                stats_str = format_item_stats(item_data.get('stats', {}))
                rarity_color = {"common": "", "magic": "üîπ", "rare": "‚≠ê", "legendary": "‚ú®"}.get(item_data.get('rarity', ''), '')
                type_emoji = ITEM_TYPE_EMOJI.get(item_data.get('type'), ITEM_TYPE_EMOJI['default'])

                shop_text += f"\n{type_emoji} <b>{hd.quote(item_data['name'])}</b> {rarity_color}\n"
                shop_text += f"<pre>{stats_str}</pre>\n"
                shop_text += f"–¶–µ–Ω–∞: {price}üí∞\n"
        shop_text += "\n<i>–ù–∞–∂–º–∏—Ç–µ ‚ÑπÔ∏è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ ‚úÖ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.</i>"
    return shop_text

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω ---
async def show_shop(message: types.Message, state: FSMContext, shop_type: str, shop_title: str):
    user_id = message.from_user.id
    logging.info(f"User {user_id} entered {shop_type}.")
    try: await check_and_apply_regen(user_id, await state.get_state())
    except Exception as e: logging.error(f"Regen check error in {shop_type}: {e}")

    player = await get_player_effective_stats(user_id)
    if not player:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
        return

    item_ids = await refresh_shop_if_needed(shop_type)
    keyboard = get_shop_action_keyboard(shop_type, item_ids, player['gold'])
    shop_text = format_shop_message_text(shop_title, item_ids, player['gold'])

    try:
        await message.answer(shop_text, reply_markup=keyboard, parse_mode="HTML")
    except TelegramBadRequest as e:
         # –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
         if "message is too long" in str(e):
              logging.warning(f"Shop message too long for user {user_id}. Sending short version.")
              await message.answer(f"{shop_title}\n–í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {player['gold']}üí∞\n\n<i>–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–¥–µ—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.</i>", reply_markup=keyboard)
         else:
              logging.error(f"Error sending shop message for user {user_id}: {e}")
              await message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.", reply_markup=keyboard)


@router.message(F.text.lower() == "üõí –º–∞–≥–∞–∑–∏–Ω –æ—Ä—É–∂–∏—è")
async def weapon_shop_start(message: types.Message, state: FSMContext):
    await show_shop(message, state, 'weapon_shop', 'üõí –ú–∞–≥–∞–∑–∏–Ω –û—Ä—É–∂–∏—è')

@router.message(F.text.lower() == "üõ°Ô∏è –º–∞–≥–∞–∑–∏–Ω –±—Ä–æ–Ω–∏")
async def armor_shop_start(message: types.Message, state: FSMContext):
    await show_shop(message, state, 'armor_shop', 'üõ°Ô∏è –ú–∞–≥–∞–∑–∏–Ω –ë—Ä–æ–Ω–∏')


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ ---
@router.callback_query(F.data.startswith("shop:"))
async def handle_shop_action(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data_parts = callback.data.split(":") # shop:shop_type:action:item_id[:price]

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω—è–µ–º –ø—Å–µ–≤–¥–æ–∫–æ–¥ –Ω–∞ return ---
    if len(data_parts) < 3:
        logging.error(f"Invalid shop callback data (too few parts): {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    shop_type = data_parts[1]
    action = data_parts[2]
    shop_title = "üõí –ú–∞–≥–∞–∑–∏–Ω –û—Ä—É–∂–∏—è" if shop_type == 'weapon_shop' else "üõ°Ô∏è –ú–∞–≥–∞–∑–∏–Ω –ë—Ä–æ–Ω–∏"

    if action == "close":
        await callback.answer("–ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç.")
        try: await callback.message.delete()
        except Exception: pass
        return
    if action == "noop":
        await callback.answer("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.")
        return
    if action == "refresh_info":
        _, last_refresh = await get_shop_items(shop_type)
        time_left = SHOP_REFRESH_INTERVAL - (int(time.time()) - last_refresh)
        if time_left > 0:
             hours, rem = divmod(time_left, 3600)
             mins, _ = divmod(rem, 60)
             time_left_str = f"~{int(hours)}—á {int(mins)}–º" if hours > 0 else f"~{int(mins)}–º"
             await callback.answer(f"–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {time_left_str}.", show_alert=True)
        else:
             await callback.answer("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–∫–æ—Ä–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è!", show_alert=True)
        return
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    # –î–ª—è 'buy', 'info', 'back' –Ω—É–∂–µ–Ω item_id (–∏–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è back)
    item_id = None
    item_data = None
    price = 0
    if action in ["buy", "info"]:
         try:
             item_id = data_parts[3]
             item_data = ALL_ITEMS.get(item_id)
             if not item_data: raise ValueError("Item not found in ALL_ITEMS")
             price = int(data_parts[4]) if action == "buy" and len(data_parts) > 4 else item_data.get('cost', 99999)
         except (IndexError, ValueError) as e:
             # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω—è–µ–º –ø—Å–µ–≤–¥–æ–∫–æ–¥ –Ω–∞ return ---
             logging.error(f"Invalid item data in shop callback: {callback.data} - {e}")
             await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞.", show_alert=True)
             return
             # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    # --- –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –º–∞–≥–∞–∑–∏–Ω—É ---
    if action == "back":
        player = await get_player_effective_stats(user_id)
        if not player: return
        item_ids = await get_shop_items(shop_type)
        keyboard = get_shop_action_keyboard(shop_type, item_ids, player['gold'])
        shop_text = format_shop_message_text(shop_title, item_ids, player['gold'])
        try:
            await callback.message.edit_text(shop_text, reply_markup=keyboard, parse_mode="HTML")
            await callback.answer()
        except Exception as e:
             logging.error(f"Error going back to shop {shop_type} for user {user_id}: {e}")
             await callback.answer("–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω.", show_alert=True)
        return
    # --- –ö–æ–Ω–µ—Ü –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ ---

    # --- –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–µ (action == "info") ---
    if action == "info":
        if not item_data: return # –ü—Ä–æ–≤–µ—Ä–∫–∞
        stats_str = format_item_stats(item_data.get('stats', {}))
        description = item_data.get('description', '')
        cost_str = f"–¶–µ–Ω–∞: {item_data.get('cost', '???')}üí∞"
        equip_str = "–ú–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å" if item_data.get('equipable') else "–ù–µ–ª—å–∑—è –Ω–∞–¥–µ—Ç—å"
        rarity = item_data.get('rarity', 'unknown').capitalize()
        type_name = item_data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
        type_emoji = ITEM_TYPE_EMOJI.get(item_data.get('type'), ITEM_TYPE_EMOJI['default'])

        info_text = (
            f"{type_emoji} <b>{hd.quote(item_data['name'])}</b> ({rarity})\n"
            f"–¢–∏–ø: {type_name}\n<i>{equip_str}</i>\n\n"
            f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n<pre>{stats_str}</pre>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{description if description else '-'}</i>\n\n"
            f"{cost_str}"
        )
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞–≥–∞–∑–∏–Ω—É", callback_data=f"shop:{shop_type}:back")]
        ])
        try:
            await callback.message.edit_text(info_text, reply_markup=back_keyboard, parse_mode="HTML")
            await callback.answer()
        except TelegramBadRequest as e:
             if "message is not modified" in str(e): await callback.answer()
             else:
                 logging.error(f"Error editing message for item info {item_id}: {e}")
                 await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", show_alert=True)
        except Exception as e:
             logging.error(f"Unexpected error editing message for item info {item_id}: {e}")
             await callback.answer("–û—à–∏–±–∫–∞.", show_alert=True)
        return

    # --- –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ (action == "buy") ---
    if action == "buy":
        if not item_data: return # –ü—Ä–æ–≤–µ—Ä–∫–∞
        await callback.answer("–ü–æ–∫—É–ø–∞–µ–º...")
        logging.info(f"Attempting purchase: User {user_id}, Item {item_id}, Price {price}, Shop {shop_type}")
        player = await get_player_effective_stats(user_id)
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω—è–µ–º –ø—Å–µ–≤–¥–æ–∫–æ–¥ –Ω–∞ return ---
        if not player:
             await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞.", show_alert=True)
             return
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        server_price = item_data.get('cost', 99999)
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω—è–µ–º –ø—Å–µ–≤–¥–æ–∫–æ–¥ –Ω–∞ return ---
        if price != server_price:
             logging.warning(f"Price mismatch for item {item_id} in {shop_type}. Callback: {price}, Server: {server_price}")
             current_item_ids, _ = await get_shop_items(shop_type)
             # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É/–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
             new_keyboard = get_shop_action_keyboard(shop_type, current_item_ids, player['gold'])
             try: await callback.message.edit_reply_markup(reply_markup=new_keyboard)
             except Exception: pass
             await callback.answer("–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
             return
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–º–µ–Ω—è–µ–º –ø—Å–µ–≤–¥–æ–∫–æ–¥ –Ω–∞ return ---
        if player['gold'] < price:
             await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞! –ù—É–∂–Ω–æ {price}üí∞.", show_alert=True)
             return
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–æ–ª–æ—Ç–æ
        await update_player_xp(user_id, gained_gold=-price)
        logging.info(f"Gold deducted for user {user_id}. Adding item to inventory...")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
        success_add = await add_item_to_inventory(user_id, item_id)
        logging.info(f"Add item result for user {user_id}, item {item_id}: {success_add}")

        if not success_add:
             logging.error(f"Failed to add item {item_id} to inventory for user {user_id} after purchase. Attempting to return gold...")
             await update_player_xp(user_id, gained_gold=price)
             logging.info(f"Returned {price} gold to user {user_id} due to inventory add failure.")
             await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞! –ó–æ–ª–æ—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ.", show_alert=True)
             return

        # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
        logging.info(f"Item {item_id} added successfully for user {user_id}. Updating shop message...")
        player_after_purchase = await get_player_effective_stats(user_id)
        current_item_ids, _ = await get_shop_items(shop_type)
        new_keyboard = get_shop_action_keyboard(shop_type, current_item_ids, player_after_purchase['gold'])
        purchase_message = f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ '<b>{hd.quote(item_data['name'])}</b>' –∑–∞ {price}üí∞!"

        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–∞–≥–∞–∑–∏–Ω–∞
        new_shop_text = format_shop_message_text(shop_title, current_item_ids, player_after_purchase['gold'])
        final_text = f"{purchase_message}\n\n{new_shop_text}"

        try:
            await callback.message.edit_text(final_text, reply_markup=new_keyboard, parse_mode="HTML")
            logging.info(f"Shop message updated after purchase for user {user_id}.")
        except TelegramBadRequest as e:
             if "message is not modified" in str(e):
                 logging.warning(f"Message not modified when updating shop after purchase for {user_id}.")
                 await callback.answer(purchase_message, show_alert=False)
             else:
                  logging.error(f"Error editing shop message after purchase for user {user_id}: {e}")
                  await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.", show_alert=True)
        except Exception as e:
             logging.error(f"Unexpected error editing shop message after purchase for user {user_id}: {e}")
             await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.", show_alert=True)

# --- –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ handlers/shop.py ---
