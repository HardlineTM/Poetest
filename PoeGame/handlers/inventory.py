# handlers/inventory.py
import logging
import math # –î–æ–±–∞–≤–∏–ª–∏ math
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.text_decorations import html_decoration as hd

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î –∏ –¥–∞–Ω–Ω—ã–µ
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º delete_item_from_inventory –≤ –∏–º–ø–æ—Ä—Ç ---
from database.db_manager import (
    get_inventory_items, get_item_from_inventory, equip_item, unequip_item,
    get_player_effective_stats, check_and_apply_regen,
    delete_item_from_inventory, # <--- –î–û–ë–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
    update_player_xp # –ù—É–∂–µ–Ω –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ
)
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
from game_data import (
    ALL_ITEMS, ITEM_SLOTS, SLOT_RING1, SLOT_RING2, ITEM_TYPE_RING,
    SLOT_HELMET, SLOT_CHEST, SLOT_GLOVES, SLOT_BOOTS, SLOT_AMULET, SLOT_BELT,
    ITEM_TYPE_FRAGMENT # –ù—É–∂–µ–Ω –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤ –∫—É–∑–Ω–µ—Ü–µ, –Ω–æ –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç
)


logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - [%(filename)s:%(lineno)d] - %(message)s")
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∏ ---
class EquipStates(StatesGroup):
    choosing_slot = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –∫–æ–ª–µ—Ü)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_item_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É."""
    if not stats:
        return "<i>(–ù–µ—Ç –±–æ–Ω—É—Å–æ–≤)</i>"
    lines = []
    stat_map = {
        'max_hp': '‚ù§Ô∏è –ú–∞–∫—Å. HP', 'max_mana': 'üíß –ú–∞–∫—Å. Mana',
        'strength': 'üí™ –°–∏–ª–∞', 'dexterity': 'üèπ –õ–æ–≤–∫–æ—Å—Ç—å', 'intelligence': 'üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        'armor': 'ü¶æ –ë—Ä–æ–Ω—è', 'max_energy_shield': 'üõ°Ô∏è –ú–∞–∫—Å. –≠–Ω–µ—Ä–≥–æ—â–∏—Ç'
        # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
    }
    for stat_name, value in stats.items():
        display_name = stat_map.get(stat_name, stat_name)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ + –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if isinstance(value, (int, float)) and value > 0:
             lines.append(f"{display_name}: +{value}")
        elif isinstance(value, (int, float)) and value < 0: # –ù–∞ —Å–ª—É—á–∞–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–æ–≤
             lines.append(f"{display_name}: {value}")
        else: # –î–ª—è –Ω—É–ª–µ–≤—ã—Ö –∏–ª–∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö (—Ö–æ—Ç—è –∏—Ö –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
             lines.append(f"{display_name}: {value}")

    return "\n".join(lines) if lines else "<i>(–ù–µ—Ç –±–æ–Ω—É—Å–æ–≤)</i>"

def get_inventory_keyboard(items: list[dict]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–¥–µ—Ç—å/—Å–Ω—è—Ç—å/–ø—Ä–æ–¥–∞—Ç—å."""
    buttons = []
    if not items:
        buttons.append([InlineKeyboardButton(text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç", callback_data="inv:noop")])
    else:
        items.sort(key=lambda x: (not x['is_equipped'], x['type'], x['name']))
        for item in items:
            item_data_from_all = ALL_ITEMS.get(item['item_id'], {}) # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ALL_ITEMS
            item_cost = item_data_from_all.get('cost', 0) # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
            sell_price = math.floor(item_cost * 0.5) if item_cost > 0 else 0 # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (50%)

        for item in items:
            type_emoji = {
                "helmet": "üéì", "chest": "üëï", "gloves": "üß§", "boots": "üë¢",
                "ring": "üíç", "amulet": "üìø", "belt": "üéóÔ∏è"
            }.get(item['type'], '‚ùì')

            if item['is_equipped']:
                equip_status_prefix = "‚úÖ "
                equip_slot_info = f" ({item['equipped_slot']})"
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è
                action_button = InlineKeyboardButton(
                    text=f"{equip_status_prefix}{type_emoji} {hd.quote(item['name'])}{equip_slot_info} (–°–Ω—è—Ç—å)",
                    callback_data=f"inv:unequip:{item['inventory_id']}"
                )
                buttons.append([action_button])
            else: # –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–¥–µ—Ç
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–¥–µ–≤–∞–Ω–∏—è
                equip_button = InlineKeyboardButton(
                    text=f"{type_emoji} {hd.quote(item['name'])} (–ù–∞–¥–µ—Ç—å)",
                    callback_data=f"inv:equip:{item['inventory_id']}"
                )
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–µ—Å–ª–∏ —Ü–µ–Ω–∞ > 0)
                if sell_price > 0:
                    sell_button = InlineKeyboardButton(
                        text=f"–ü—Ä–æ–¥–∞—Ç—å üóëÔ∏è ({sell_price}üí∞)",
                        callback_data=f"inv:sell:{item['inventory_id']}:{sell_price}" # –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏
                    )
                    # –ü–æ–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–¥–µ—Ç—å" –∏ "–ü—Ä–æ–¥–∞—Ç—å" –≤ –æ–¥–∏–Ω —Ä—è–¥
                    buttons.append([equip_button, sell_button])
                else:
                     # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å, —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–¥–µ—Ç—å"
                     buttons.append([equip_button])

    buttons.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="inv:close")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_slot_selection_keyboard(item_type: str, inventory_id: int) -> InlineKeyboardMarkup | None:
     """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏."""
     allowed_slots = ITEM_SLOTS.get(item_type)
     if not allowed_slots: return None

     buttons = []
     if item_type == ITEM_TYPE_RING:
         buttons.append([InlineKeyboardButton(text="üíç –ö–æ–ª—å—Ü–æ 1", callback_data=f"equip_slot:{inventory_id}:{SLOT_RING1}")])
         buttons.append([InlineKeyboardButton(text="üíç –ö–æ–ª—å—Ü–æ 2", callback_data=f"equip_slot:{inventory_id}:{SLOT_RING2}")])
     elif len(allowed_slots) == 1:
         return None # –í—ã–±–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Å–ª–æ—Ç –æ–¥–∏–Ω
     else: # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å >1 —Å–ª–æ—Ç–∞ (–µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è)
         for slot in allowed_slots:
             buttons.append([InlineKeyboardButton(text=f"–°–ª–æ—Ç: {slot}", callback_data=f"equip_slot:{inventory_id}:{slot}")])

     buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"equip_slot:{inventory_id}:cancel")])
     return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
@router.message(F.text.lower() == "üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def show_inventory(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} requested inventory.")
    # --- –í—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
    try:
        current_state_str = await state.get_state()
        await check_and_apply_regen(user_id, current_state_str) # <-- –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞
    except Exception as e:
        logging.error(f"Error during regen check in show_inventory for user {user_id}: {e}", exc_info=False)


    inventory_items = await get_inventory_items(user_id)
    player_exists = await get_player_effective_stats(user_id) # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞

    if not player_exists:
         await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
         return

    keyboard = get_inventory_keyboard(inventory_items)
    text = "üéí <b>–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:</b>\n\n"
    if not inventory_items:
        text += "–ü—É—Å—Ç–æ..."
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        text += "<u>–ù–∞–¥–µ—Ç–æ:</u>\n"
        equipped_found = False
        for item in inventory_items:
            if item['is_equipped']:
                equipped_found = True
                type_emoji = {"helmet": "üéì", "chest": "üëï", "gloves": "üß§", "boots": "üë¢","ring": "üíç", "amulet": "üìø", "belt": "üéóÔ∏è"}.get(item['type'], '‚ùì')
                item_stats_str = format_item_stats(item.get('stats', {}))
                text += f"{type_emoji} <b>{hd.quote(item['name'])}</b> ({item['equipped_slot']}):\n<pre>{item_stats_str}</pre>\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º <pre> –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–æ–≤

        if not equipped_found:
            text += "<i>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–µ—Ç–æ</i>\n"

        text += "\n<u>–í —Å—É–º–∫–∞—Ö:</u>\n"
        unequipped_found = False
        for item in inventory_items:
             if not item['is_equipped']:
                 unequipped_found = True
                 type_emoji = {"helmet": "üéì", "chest": "üëï", "gloves": "üß§", "boots": "üë¢","ring": "üíç", "amulet": "üìø", "belt": "üéóÔ∏è"}.get(item['type'], '‚ùì')
                 item_stats_str = format_item_stats(item.get('stats', {}))
                 text += f"{type_emoji} <b>{hd.quote(item['name'])}</b>:\n<pre>{item_stats_str}</pre>\n"

        if not unequipped_found:
             text += "<i>–†—é–∫–∑–∞–∫ –ø—É—Å—Ç</i>\n"

        text += "\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–¥–µ—Ç—å/—Å–Ω—è—Ç—å –µ–≥–æ.</i>"


    try:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
        logging.error(f"Error sending inventory message for user {user_id}: {e}")
        await message.answer("üéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
@router.callback_query(F.data.startswith("inv:"))
async def handle_inventory_action(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action_data = callback.data.split(":") # inv:action:inventory_id

    action = action_data[1]
    logging.debug(f"Inventory action '{action}' for user {user_id}, data: {callback.data}")

    if action == "close":
        await callback.answer("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–∫—Ä—ã—Ç.")
        try: await callback.message.delete()
        except Exception: pass
        return
    if action == "noop":
        await callback.answer("–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø—É—Å—Ç–æ.")
        return

    try:
        inventory_id = int(action_data[2])
    except (IndexError, ValueError):
        logging.error(f"Invalid inventory callback data (inventory_id): {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞.", show_alert=True)
        return

    # --- –°–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
    if action == "unequip":
        await callback.answer("–°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç...") # –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        success, message_text = await unequip_item(user_id, inventory_id)
        if success:
            logging.info(f"Item inv_id:{inventory_id} unequipped by user {user_id}.")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
            inventory_items = await get_inventory_items(user_id)
            keyboard = get_inventory_keyboard(inventory_items)
            new_text = f"{message_text}\n\nüéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**" # TODO: –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –≤ show_inventory
            try:
                 await callback.message.edit_text(new_text, reply_markup=keyboard, parse_mode="HTML")
            except Exception as e:
                 logging.warning(f"Could not edit inventory message after unequip: {e}")
                 await callback.message.answer(new_text, reply_markup=keyboard, parse_mode="HTML")
                 try: await callback.message.delete()
                 except Exception: pass
        else:
            logging.warning(f"Failed to unequip item inv_id:{inventory_id} for user {user_id}: {message_text}")
            await callback.answer(message_text, show_alert=True)

    # --- –ù–∞–¥–µ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
    elif action == "equip":
        await callback.answer("–ù–∞–¥–µ–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç...") # –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        item_to_equip = await get_item_from_inventory(inventory_id)

        if not item_to_equip or item_to_equip['player_id'] != user_id:
            logging.warning(f"Equip failed: Item inv_id:{inventory_id} not found or wrong owner for user {user_id}.")
            await callback.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            return
        if item_to_equip['is_equipped']:
             logging.debug(f"Equip cancelled: Item inv_id:{inventory_id} already equipped by user {user_id}.")
             await callback.answer("–ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –Ω–∞–¥–µ—Ç.", show_alert=True)
             return

        item_type = item_to_equip['type']
        slot_keyboard = get_slot_selection_keyboard(item_type, inventory_id)

        if slot_keyboard:
            # –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞
            logging.info(f"User {user_id} needs to choose slot for item inv_id:{inventory_id}")
            try:
                await callback.message.edit_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '<b>{hd.quote(item_to_equip['name'])}</b>':",
                    reply_markup=slot_keyboard,
                    parse_mode="HTML"
                )
                await state.set_state(EquipStates.choosing_slot)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–¥–µ—Ç—å, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(item_to_equip_inv_id=inventory_id)
            except Exception as e:
                 logging.error(f"Error showing slot selection for user {user_id}, item {inventory_id}: {e}")
                 await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞.", show_alert=True)

        else:
            # –°–ª–æ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –Ω–∞–¥–µ–≤–∞–µ–º —Å—Ä–∞–∑—É
            allowed_slots = ITEM_SLOTS.get(item_type)
            if allowed_slots and len(allowed_slots) == 1:
                target_slot = allowed_slots[0]
                logging.info(f"Auto-equipping item inv_id:{inventory_id} to single slot '{target_slot}' for user {user_id}.")
                success, message_text = await equip_item(user_id, inventory_id, target_slot)
                if success:
                    logging.info(f"Item inv_id:{inventory_id} equipped by user {user_id} to slot '{target_slot}'.")
                    inventory_items = await get_inventory_items(user_id)
                    keyboard = get_inventory_keyboard(inventory_items)
                    new_text = f"{message_text}\n\nüéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**" # TODO: –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                    try:
                         await callback.message.edit_text(new_text, reply_markup=keyboard, parse_mode="HTML")
                    except Exception as e:
                         logging.warning(f"Could not edit inventory message after auto-equip: {e}")
                         await callback.message.answer(new_text, reply_markup=keyboard, parse_mode="HTML")
                         try: await callback.message.delete()
                         except Exception: pass
                else:
                    logging.warning(f"Failed to auto-equip item inv_id:{inventory_id} for user {user_id}: {message_text}")
                    await callback.answer(message_text, show_alert=True)
            else:
                logging.error(f"Cannot auto-equip item inv_id:{inventory_id} for user {user_id}: No single slot defined for type '{item_type}'.")
                await callback.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Ç–∏–ø–∞ '{item_type}'.", show_alert=True)
    # --- –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ ---
    elif action == "sell":
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –∏–∑ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            expected_sell_price = int(action_data[3])
        except (IndexError, ValueError):
            logging.error(f"Invalid sell callback data (price missing): {callback.data}")
            await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂–∏.", show_alert=True)
            return

        await callback.answer("–ü—Ä–æ–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç...")
        item_to_sell = await get_item_from_inventory(inventory_id)

        if not item_to_sell or item_to_sell['player_id'] != user_id:
            await callback.answer("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", show_alert=True)
            return
        if item_to_sell['is_equipped']:
             await callback.answer("–°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å.", show_alert=True)
             return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –∏ —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        item_base_cost = ALL_ITEMS.get(item_to_sell['item_id'], {}).get('cost', 0)
        actual_sell_price = math.floor(item_base_cost * 0.5) if item_base_cost > 0 else 0

        if actual_sell_price <= 0:
             await callback.answer("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å.", show_alert=True)
             return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫)
        if actual_sell_price != expected_sell_price:
             logging.warning(f"Sell price mismatch for inv_id {inventory_id}. CB: {expected_sell_price}, Server: {actual_sell_price}")
             await callback.answer("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
             # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
             inventory_items_refresh = await get_inventory_items(user_id)
             keyboard_refresh = get_inventory_keyboard(inventory_items_refresh)
             try: await callback.message.edit_reply_markup(reply_markup=keyboard_refresh)
             except Exception: pass
             return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ë–î
        deleted = await delete_item_from_inventory(inventory_id)
        if not deleted:
             await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.", show_alert=True)
             return

        # –ù–∞—á–∏—Å–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
        await update_player_xp(user_id, gained_gold=actual_sell_price)
        logging.info(f"User {user_id} sold item inv_id:{inventory_id} ('{item_to_sell.get('name','???')}') for {actual_sell_price} gold.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inventory_items_after_sell = await get_inventory_items(user_id)
        keyboard_after_sell = get_inventory_keyboard(inventory_items_after_sell)
        sell_message = f"üóëÔ∏è –í—ã –ø—Ä–æ–¥–∞–ª–∏ '{hd.quote(item_to_sell['name'])}' –∑–∞ {actual_sell_price}üí∞."
        # TODO: –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∫–∞–∫ –≤ show_inventory
        new_text = f"{sell_message}\n\nüéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**"
        try:
            await callback.message.edit_text(new_text, reply_markup=keyboard_after_sell, parse_mode="HTML")
        except Exception as e:
            logging.warning(f"Could not edit inventory message after sell: {e}")
            await callback.message.answer(sell_message, parse_mode="HTML")
            await callback.message.answer("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", reply_markup=keyboard_after_sell)
            try: await callback.message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
            except Exception: pass

    else:
         logging.warning(f"Unknown inventory action '{action}' from user {user_id}. Callback: {callback.data}")
         await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ (–∫–æ–≥–¥–∞ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É —Å–ª–æ—Ç–∞)
@router.callback_query(EquipStates.choosing_slot, F.data.startswith("equip_slot:"))
async def handle_slot_selection(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action_data = callback.data.split(":") # equip_slot:inventory_id:slot_name / cancel

    try:
        inventory_id = int(action_data[1])
        target_slot = action_data[2]
    except (IndexError, ValueError):
        logging.error(f"Invalid slot selection callback data format: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞.", show_alert=True)
        await state.clear()
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
        inventory_items = await get_inventory_items(user_id)
        keyboard = get_inventory_keyboard(inventory_items)
        try: await callback.message.edit_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞. –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", reply_markup=keyboard)
        except Exception: pass
        return

    logging.debug(f"Slot selection action for user {user_id}: slot='{target_slot}', inv_id='{inventory_id}'")

    if target_slot == "cancel":
        await callback.answer("–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inventory_items = await get_inventory_items(user_id)
        keyboard = get_inventory_keyboard(inventory_items)
        # TODO: –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        new_text = "üéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç..."
        try: await callback.message.edit_text(new_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logging.warning(f"Could not edit message on slot selection cancel: {e}")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ inventory_id –∏–∑ callback —Å —Ç–µ–º, —á—Ç–æ –≤ state
    state_data = await state.get_data()
    item_to_equip_inv_id = state_data.get("item_to_equip_inv_id")
    if item_to_equip_inv_id != inventory_id:
         logging.warning(f"Inventory ID mismatch in slot selection state for user {user_id}. State: {item_to_equip_inv_id}, Callback: {inventory_id}")
         await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.", show_alert=True)
         await state.clear()
         # –í–µ—Ä–Ω—É—Ç—å –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
         inventory_items = await get_inventory_items(user_id)
         keyboard = get_inventory_keyboard(inventory_items)
         try: await callback.message.edit_text("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", reply_markup=keyboard)
         except Exception: pass
         return

    # –ù–∞–¥–µ–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
    logging.info(f"Attempting to equip item inv_id:{inventory_id} to slot '{target_slot}' for user {user_id}")
    success, message_text = await equip_item(user_id, inventory_id, target_slot)
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞–¥–µ—Ç—å

    if success:
        logging.info(f"Item inv_id:{inventory_id} equipped successfully to slot '{target_slot}' by user {user_id}.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inventory_items = await get_inventory_items(user_id)
        keyboard = get_inventory_keyboard(inventory_items)
        # TODO: –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        new_text = f"{message_text}\n\nüéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:**"
        try:
            await callback.message.edit_text(new_text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            logging.warning(f"Could not edit inventory message after slot equip success: {e}")
            await callback.message.answer(new_text, reply_markup=keyboard, parse_mode="HTML")
            try: await callback.message.delete()
            except Exception: pass
    else:
        # –ï—Å–ª–∏ –Ω–∞–¥–µ—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
        logging.warning(f"Failed to equip item inv_id:{inventory_id} to slot '{target_slot}' for user {user_id}: {message_text}")
        await callback.answer(message_text, show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é
        inventory_items = await get_inventory_items(user_id)
        keyboard = get_inventory_keyboard(inventory_items)
        new_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–¥–µ—Ç—å –ø—Ä–µ–¥–º–µ—Ç. –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:"
        try: await callback.message.edit_text(new_text, reply_markup=keyboard)
        except Exception as e:
            logging.warning(f"Could not edit message after slot equip failure: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Å–ª–æ—Ç–æ–≤ –í–ù–ï —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.callback_query(F.data.startswith("equip_slot:"))
async def handle_equip_slot_outside_state(callback: types.CallbackQuery):
    logging.warning(f"User {callback.from_user.id} pressed equip_slot button outside of state. Callback: {callback.data}")
    await callback.answer("–í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω.", show_alert=True)
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"Could not edit old slot selection message markup: {e}")
